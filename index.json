[{"content":"Github: dcape\nRelease: v1.1, Two years in production\n","description":"Dcape v1.1","id":0,"section":"updates","tags":null,"title":"November 2020","uri":"http://dopos.github.io/updates/2020_november/"},{"content":"v1.0.0-rc2 (2018-09-23) Github: dcape\nRelease: v1.0.0-rc2, Use apisite\nИзменено  apps/enfist: вместо pgrpc теперь используется apisite  Установка обновления git pull mv .env .env.bak make init make enfist-apply make up ","description":"Dcape v1.0.0-rc2","id":1,"section":"updates","tags":null,"title":"September 2018","uri":"http://dopos.github.io/updates/2018_september/"},{"content":"v1.0.0-rc1 Date: 2017-10-22\nGithub: dcape\nRelease: v1.0.0-rc1, Ready to use\nИзменено  apps/traefik*: в настройки вынесен редирект 80 -\u0026gt; 443 apps/traefik теперь не совместим по конфигу с apps/traefik-acme, при переключении необходим make init  v0.10 Date: 2017-10-19\nИзменено  apps/cis: добавлено создание каталогов var/apps, var/log в cis-apply apps/cis: изменена версия webtail (0.12) apps/enfist: исправлено обновление sql-пакетов enfist,rpc и их текущие версии  Добавлено  Файл CHANGELOG.md README.md: информация о зависимости (gawk), уточнен блок \u0026ldquo;Быстрый старт\u0026rdquo; DEPLOY.md: блоки \u0026ldquo;Информация для разработчика\u0026rdquo;, \u0026ldquo;Удаление деплоя\u0026rdquo; Makefile: поддержка параметров PG_PORT_LOCAL, CFG_BAK  Установка обновления 1 2 3 4 5 6 7 8 9 10  git pull mv .env .env.bak make init # Тут будет предупреждение об устаревшей версии webtail - надо изменить на новую в .env make enfist-apply # Сообщения \u0026#34;ERROR: Newest lib version (0.1) loaded already\u0026#34; игнорируем, других ошибок быть не должно make dc CMD=\u0026#34;up -d webtail\u0026#34;   ","description":"Dcape v1.0.0-rc1","id":2,"section":"updates","tags":null,"title":"October 2017","uri":"http://dopos.github.io/updates/2017_october/"},{"content":"Github: dcape\nCommit: v0.1, code working in general\n","description":"First release of dcape project","id":3,"section":"updates","tags":null,"title":"August 2017","uri":"http://dopos.github.io/updates/2017_august/"},{"content":"Github: fidm\nCommit: init\n","description":"First commit of fidm project","id":4,"section":"updates","tags":null,"title":"February 2015","uri":"http://dopos.github.io/updates/2015_february/"},{"content":"Github: consup\nCommit: init\n","description":"First commit of consup project","id":5,"section":"updates","tags":null,"title":"November 2014","uri":"http://dopos.github.io/updates/2014_november/"},{"content":"   Приложение traefik     Docker image   Назначение агрегация и проксирование www-сервисов развернутых приложений по заданному имени с поддержкой сертификатов Let\u0026rsquo;s Encrypt    Использование TLS Dcape поддерживает протокол TLS с использованием ключей Let\u0026rsquo;s Encrypt.\nПри инициализации Dcape, поддержку TLS можно сконфигурировать четырьмя способами:\n local mode - локальная установка, использование DCAPE на локальном компьютере без поддержки TLS. dev mode - установка с использованием TLS с отдельным сертификатом для каждого приложения, использование которых настраивается конкретно для приложения при его развертывании. По умолчанию включено для встроенных приложений dcape (cis, portainer, gitea). В этом режиме используется переменная REDIR_ENTRY, которой устанавливается редирект на https отдельно для каждого приложения. В других режимах значение этой переменной не определено и не используется. wild mode - установка для деплоя приложений с возможностью использования TLS c wilcards сертификатом от Let\u0026rsquo;s Encrypt для всех веб сервисов dcape и приложений (позволяет не опасаться ограничения по лимиту количества сертификатов на один домен). production mode - установка с использованием индивидуальных сертификатов Let\u0026rsquo;s Encrypt для каждого веб сервиса.  Dcape поддерживает автоматическую генерацию сертификатов и валидацию домена для индивидуальных сертификатов.\nДля wildcards сертификатов, автоматическая генерация сертификатов и валидация доменов поддерживается для DNS\nпровайдеров с поддержкой API.\nПо умолчанию, при инициализации, конфигурируется автоматизированная генерация (перегенерация) сертификатов, при которой автоматически запускается генерация сертификата, в лог файл выдается хеш, который необходимо\nвнести в поле домена, тип TXT, имя _acme-challenge.$DOMAIN, значение хеш из лога .\nWildcards генерируется для домена: *.$DOMAIN, где DOMAIN=\u0026ldquo;домен для которого разворачивается DCAPE\u0026rdquo;\nДля перехода на автоматический wild-mode необходимо:\n изменить в директиве APPS сервис traefik-acme на treafik-acme-wild в .env добавить директивы DNS_CHALLENGE_PROVIDER и DNS_CHALLENGE_RESOLVER в apps/traefik-acme-wild/docker-compose.inc.yml в секции environment указать соответствующие вашему провайдеру наименования API_KEY/API_URL по примеру PDNS выполнить make reup для DCAPE.  В случае не запуска traefik-acme-wild смотреть логи контейнера. Контейнер не будет запускаться, если упущены обязательные настройки.\nВ период настройки во избежание бана со стороны Letsencrypt рекомендуется использовать директиву ACME_CASERVER=https://acme-staging-v02.api.letsencrypt.org/directory\nдля работы через тестовый канал (выписывается Fake сертификат), а после полной отладки механизма, выкл ACME_CASERVER.\n","description":"агрегация и проксирование www-сервисов развернутых приложений по заданному имени с поддержкой сертификатов Let's Encrypt","id":6,"section":"dcape","tags":null,"title":"traefik","uri":"http://dopos.github.io/dcape/apps/traefik/"},{"content":"Для развертывания приложений в среде dcape v2 используется drone c образом docker-compose (создается при установке dcape).\nСм. также  Deploy with Drone Адаптированные для dcape приложения dcape-config-cli - утилита для работы (загрузки,выгрузки, изменения) с конфигурациями запуска в среде dcape Актуальный список адаптированных приложений dcape  Управление конфигурациями запуска приложений Конфигурация запуска любого приложения dcape - текстовый файл .env, который создается командой make .env.\nЭтот файл используется make start-hook для разворачивания приложения и docker-compose для управления контейнерами приложения.\nВ части переменных, используемых в docker-compose.yml, формат файла должен соответствовать docker-compose env_file.\nКонфигурации запуска приложений хранятся в БД в виде Key-value хранилища, где ключ формируется из адреса git репозитория organization--name_of_repo--branch (организация--проект--ветка), а значение - содержимое .env файла. Доступ к хранилищу закрыт паролем и осуществляется через фронтенд cis.\nКроме веб-интерфейса, работа с конфигурациями запуска может осуществляться через dcape-config-cli.\nПримеры команд, доступных после клонирования (git clone) и настройки (make .env) dcape-config-cli:\n make get TAG=name - получить из хранилища конфигурацию для тега name и сохранить в файл name.env make set TAG=name - загрузить файл name.env в хранилище с тегом name  Тег содержит значение равное ключу БД Key-value хранилища organization--name_of_repo--branch (организация--проект--ветка)\nНеобходимые данные, для деплоя приложения под dcape (dcape развернут на dev.lan)  хост dcape, если приложение создает www сервис, то в переменной \u0026lsquo;Makefile\u0026rsquo; APP_SITE указывается имя доступа к сервису (например, aplication.dev.lan) публичный ключ развертывания деплоя (доступен по ссылке на cis.dev.lan) пароль, который должен быть передан в хуке (задан в конфиге dcape)  Порядок действий по адаптации приложения Вариант с ипользованием встроенного gitea, dcape развернут на хосте: dev.lan  Cоздать зеркало в gitea (если репозиторий размещен не на встроенном gitea), репозиторий в gitea должен быть приватным, для использования ssh ключа. Составить и добавить в репозиторий файлы Makefile и docker-compose.yml (примеры) настроить в gitea \u0026ldquo;Автоматическое обновление\u0026rdquo; выполнить тестовую доставку webhook для выполнения make .env (сохранения .env в хранилище конфигураций) выгрузить конфигурацию, активировать деплой в параметре _CI_HOOK_ENABLED, сохранить (утилита ) повторить тестовую доставку webhook или сделать git push - приложение будет развернуто на сервере dcape  Настройка автоматического обновления в gitea  добавить ключ развертывания деплоя (доступен по ссылке на cis.dev.lan) создать хук gitea с паролем из настроек dcape и ссылкой на хук  URL хука: если gitea и dcape на одном хосте - http://webhook:9000/hooks/local?branch=default, иначе - https://cis.dev.lan/hooks/remote?branch=default  события хука: Push, Create      Параметр branch=default позволяет произвести деплой копии приложения без внесения изменений в репозиторий проекта.\nЕсли изменить default на нужное имя ветки и тега, то можно выполнить удаление деплоя.\nСм. также: Описание алгоритма деплоя\nИнформация для разработчика Отличия локальной копии dcape от сервера деплоя Локально можно развернуть полный аналог iac (в dcape есть gitea - его можно развернуть, настроить как upstream, туда пушить и наблюдать локально весь процесс деплоя).\nА если локальный ip доступен снаружи, можно завести dcape на порт 80 и включить https.\nТ.е. отличие только в том, что не получится использовать по https те же доменные имена, что и на сервере, т.к. у локального хоста другой ip.\nЕсли в Makefile изменили шаблон создания .env Чтобы сгенерить новый .env, не потеряв настройки из старого, надо старый переименовать в .env.bak и выполнить make .env - значения совпадающих переменных будут перенесены в новый конфиг.\nЭто достигается помещением в Makefile строк\n-include $(CFG).bak -include $(CFG) export Удаление деплоя Чтобы удалить на сервере контейнер и каталог деплоя проекта для репозитория organization--name_of_repo--branch (организация--проект--ветка), надо создать ветку organization--name_of_repo--branch.\nДругой вариант - если в проект никто не пушит, можно в хуке поменять default на BRANCH-rm и выполнить \u0026ldquo;Проверить доставку\u0026rdquo;, после чего вернуть default.\nРеакция хука на создание ветки с суффиксом \u0026ldquo;-rm\u0026rdquo; - выполнить make stop и удалить каталог деплоя (конфиг сохраняется).\n","description":"Адаптация приложения для развертывания в среде dcape ","id":7,"section":"dcape","tags":null,"title":"Setup","uri":"http://dopos.github.io/dcape/deploy/setup/"},{"content":"Зачем это нужно Развертывание dcape имеет результатом 2 файла - docker-compose.yml и .env, которые позволяют командой make up запустить весь стек выбранных для конкретного сервера приложений. Все эти приложения доступны на dockerhub и все нужное для их запуска командой docker-compose up может быть подготовлено вручную, однако dcape добавляет в процесс подготовки такого решения следующие преимущества:\n файл параметров (.env) формируется программно, что позволяет  использовать в значениях переменные генерировать необходимые приложениям пароли и токены формировать взаимосвязанные настройки приложений   файл конфигурации контейнеров (docker-compose.yml) формируется программно, что позволяет параметризовать список приложений для каждой инсталляции, в частности  если разворачивается группа серверов различного назначения, gitea достаточно развернуть только на одном из них, а на остальных вместо make init выполнять make init GITEA=https://git.domain.tld если для сервера не нужен SSL (например, в локальной сети), не указывать параметр ACME если для сервера не нужен DNS (например, wildcard сертификаты не используются или их поддержка не использует локальный DNS), не указывать параметр DNS   использование make позволяет перед стартом приложения выполнять его инициализацию, включая  создание БД (и, при необходимости, загрузку дампа БД) формирование файлов конфигураций по шаблонам регистрацию OAuth2 приложений    ","description":"Какие задачи решает проект","id":8,"section":"dcape","tags":null,"title":"Цели проекта","uri":"http://dopos.github.io/dcape/intro/targets/"},{"content":"В случае, если уже\n настроен DNS c поддержкой wildcard-сертификатов SSL есть сервер gitea (в примере - it.domain.tld) в gitea создан TOKEN на новом сервере установлены зависимости  , установка dcape на этом новом сервере может быть произведена так:\n1 2 3 4 5 6 7 8 9  git clone -b v2 --single-branch --depth 1 https://github.com/dopos/dcape.git cd dcape make install ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  NARRA_GITEA_ORG=dcape \\  DRONE_ADMIN=lekovr \\  PDNS_LISTEN=192.168.23.10:53 \\  GITEA=https://it.domain.tld \\  TOKEN=**token_from_gitea**   В PDNS_LISTEN порт изменен на стандартный (по умолчанию: 54) и задан ip, чтобы не возникало конфликта с локальным резолвером.\n","description":"Как развернуть dcape, если уже есть gitea и DNS","id":9,"section":"dcape","tags":null,"title":"Быстрый старт","uri":"http://dopos.github.io/dcape/gettingstarted/quickstart/"},{"content":"   Приложение postgresql     Docker image   Назначение хранение конфигураций всех приложений и размещение баз данных приложений, которым требуется СУБД    ","description":"хранение конфигураций всех приложений и размещение баз данных приложений, которым требуется СУБД","id":10,"section":"dcape","tags":null,"title":"postgresql","uri":"http://dopos.github.io/dcape/apps/postgresql/"},{"content":"Markdown here\n","description":"Действия для разворачивания приложения","id":11,"section":"dcape","tags":null,"title":"Использование","uri":"http://dopos.github.io/dcape/intro/basicusage/"},{"content":"Зависимости  linux 64bit с git, make, sed, curl, jq (тестируем на Ubuntu) docker  docker-compose используется в dcape в формате docker-образа, поэтому отдельной установки не требует.\nПример установки зависимостей:\n1 2 3 4 5 6 7 8 9  # docker # см https://docs.docker.com/engine/install/ubuntu/ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs)stable\u0026#34; sudo apt install docker-ce docker-ce-cli containerd.io sudo usermod -a -G docker $USER # make git sed curl jq sudo apt install make git sed curl jq   ","description":"Приложения, необходимые для установки dcape","id":12,"section":"dcape","tags":null,"title":"Зависимости","uri":"http://dopos.github.io/dcape/gettingstarted/dependencies/"},{"content":"   Приложение gitea     Docker image   Назначение git совместимый сервис для работы с репозиториями (если используется несколько серверов, разворачивается только на одном)    ","description":"git совместимый сервис для работы с репозиториями","id":13,"section":"dcape","tags":null,"title":"gitea","uri":"http://dopos.github.io/dcape/apps/gitea/"},{"content":"DNS Т.к. dcape разворачивает несколько независимых сервисов, их имена должны быть прописаны в DNS. Предпочтительным является вариант регистрации wildcard domain, но можно и регистрировать индивидуально.\nПример имен для сервера srv1.domain.tld:\n srv1.domain.tld - для фронтендов narra, enfist, traefik git.srv1.domain.tld - для gitea drone.srv1.domain.tld - для drone port.srv1.domain.tld - для portainer ns.srv1.domain.tld - для powerdns  /etc/hosts, для локального использования 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  grep -q git.dev.lan /etc/hosts || \\ sudo bash -c \u0026#39;for n in \u0026#34;\u0026#34; git drone port ns ; do [ \u0026#34;$n\u0026#34; ] \u0026amp;\u0026amp; n=\u0026#34;$n.\u0026#34; ; echo \u0026#34;127.0.0.1 ${n}dev.lan\u0026#34; \u0026gt;\u0026gt; /etc/hosts ; done\u0026#39; cat \u0026gt;\u0026gt; /etc/hosts \u0026lt;\u0026lt;EOF for n in \u0026#34;\u0026#34; git drone port ns ; do echo ${n?-s}.dev.lan ; done 127.0.0.1 dev.lan 127.0.0.1 git.dev.lan 127.0.0.1 drone.dev.lan 127.0.0.1 port.dev.lan 127.0.0.1 ns.dev.lan EOF \u0026#39;   dnsmasq, для локального использования 1 2  sudo bash -c \u0026#39;echo \u0026#34;address=/.dev.lan/127.0.0.1\u0026#34; \u0026gt; /etc/NetworkManager/dnsmasq.d/dev.lan.conf\u0026#39; sudo service network-manager reload   DNS зона, индивидуальная регистрация srv1.domain.tld. A 192.168.23.10 git.srv1.domain.tld. A 192.168.23.10 drone.srv1.domain.tld. A 192.168.23.10 port.srv1.domain.tld. A 192.168.23.10 ns.srv1.domain.tld. A 192.168.23.10 DNS зона, wildcard-domain srv1.domain.tld. A 192.168.23.10 *.srv1.domain.tld. A 192.168.23.10 DNS зона, wildcard-domain с выделенным сервером для поддержки wildcard сертификатов Let\u0026rsquo;s Encrypt Для регистрации wildcard сертификатов traefik редактирует зону по АПИ. Чтобы не давать ему доступ к основной DNS-зоне, можно для каждого сервера создать выделенную зону (в примере - srv1.domain.tld) и директивой CNAME делегировать управление сертификатами этой зоны отдельному серверу (в примере - серверу ns.srv1.domain.tld, т.е. локальному DNS). Используемая в dcape v2 версия traefik это уже поддерживает.\nsrv1.domain.tld. A 192.168.23.10 *.srv1.domain.tld. A 192.168.23.10 acme-srv1.domain.tld. NS ns.srv1.domain.tld _acme-challenge.srv1.domain.tld. CNAME acme-srv1.domain.tld _acme-challenge.*.srv1.domain.tld. CNAME acme-srv1.domain.tld Команда инициализации dcape для этого примера:\n1 2 3  make init ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  PDNS_LISTEN=192.168.23.10:53   В PDNS_LISTEN порт изменен на стандартный (по умолчанию: 54) и задан ip, чтобы не возникало конфликта с локальным резолвером.\nСм. также: настройка связки taefik-powerdns для DNS=wild\nНастройка DNS В DNS зоне для домена your.domain должна быть создана wildcard запись для ip сервера (.your.domain A ip)\nПри установке на локальный компьютер, для доступа к сервисам dcape (cis.dev.lan, port.dev.lan) необходимо настроить wildcard domain *.dev.lan:\nОписание настройки\n1 2  sudo bash -c \u0026#39;echo \u0026#34;address=/.dev.lan/127.0.0.1\u0026#34; \u0026gt; /etc/NetworkManager/dnsmasq.d/dev.lan.conf\u0026#39; sudo service network-manager reload   или можно прописать эти имена в /etc/hosts:\n1 2  sudo bash -c \u0026#39;echo \u0026#34;127.0.0.1 cis.dev.lan\u0026#34; \u0026gt;\u0026gt; /etc/hosts\u0026#39; sudo bash -c \u0026#39;echo \u0026#34;127.0.0.1 port.dev.lan\u0026#34; \u0026gt;\u0026gt; /etc/hosts\u0026#39;   но в этом случае придется отдельно прописывать имя для каждого нового сервиса dcape.\n powerdns - (docker) DNS-сервер, который хранит описания зон в БД postgresql  ","description":"Варианты настройки DNS","id":14,"section":"dcape","tags":null,"title":"Настройка DNS","uri":"http://dopos.github.io/dcape/gettingstarted/dns/"},{"content":"   Приложение drone     Docker image   Назначение деплой приложений по событию из gitea    Как это работает Приложения (собственные исходные тексты или файлы конфигурации стороннего ПО) размещаются в репозитории на github.com или аналогичном сервисе (может использоваться встроенное приложение gitea, или собственный аналогичный сервис).\nДля поддержки среды dcape репозиторий должен содержать файлы:\n docker-compose.yml - конфигурация сервисов docker, используемых для сборки и запуска приложений Makefile с командами создания файла конфигурации запуска .env, подготовки окружения приложения (БД и прочее), запуском сервисов через docker-compose  Разворачивание приложения производится командой make start-hook, которая путем исполнения целей из Makefile, подготавливает запуск приложения, финальной целью является запуск docker-compose с использованием переменных конфигурации запуска из файла .env. Инициирование запуска make start-hook производится вебхуком сервиса git, при использовании промышленного или облачного сервера с dcape. Если dcape используется локально - разворачивание приложения осуществляется командой make start, запускаемой в терминале.\nФайл .env c переменными для docker-compose.yml и другими переменными для запуска приложения не размещается в репозитории, при первом деплое он создается командой make .env и сохраняется вебхуком в Хранилище конфигураций (enfist). После этого, доступ к конфигурации запуска приложения осуществляется через это хранилище. Для каждой ветки репозитория создается своя конфигурация запуска.\nНастройка dcape, для разворачивания приложения, состоит из двух шагов:\n Настроить автоматическое обновление (webhook) в репозитории проекта Поместить в хранилище конфигураций запуска приложения файл .env с разрешением на деплой (_CI_HOOK_ENABLED=yes)  После этого push в репозиторий проекта будет приводить к разворачиванию/обновлению приложения в среде dcape.\nСм. также: DEPLOY.md.\nДля локального использования dcape такая настройка не требуется.\n","description":"деплой приложений по событию из gitea","id":15,"section":"dcape","tags":null,"title":"drone","uri":"http://dopos.github.io/dcape/apps/drone/"},{"content":"Исходники Рекомендуемым способом копирования файлов на сервер является выполнение git clone. Это позволяет в будущем\n обновить исходники для получения информации о проверенных новых версиях используемых приложений увидеть локальные изменения исходников, если их понадобится сделать  1 2 3 4  cd /opt sudo mkdir dcape \u0026amp;\u0026amp; sudo chown $USER dcape git clone -b v2 --single-branch --depth 1 https://github.com/dopos/dcape.git cd dcape   Настройка и запуск Локальный сервер Вариант без поддержки SSL, но с установкой gitea. Выполняется в 3 шага, т.к. на шаге 2 необходимо использовать браузер для\n завершения установки gitea создания API TOKEN  Шаг 1. Подготовка к запуску gitea 1 2 3  make init DCAPE_DOMAIN=srv1.domain.tld make apply make up   Шаг 2. Запуск и настройка gitea  открыть GITEA_URL, нажать \u0026ldquo;вход\u0026rdquo; - откроется страница параметров установки ввести логин и пароль учетной записи (логин должен совпадать со значением DRONE_ADMIN) создать токен (Настройки -\u0026gt; Приложения -\u0026gt; Генерировать токен)  Шаг 3. Запуск dcape 1 2  make gitea-setup TOKEN=... make up   TOKEN - ключ АПИ gitea, который создается вручную пользователем, имеющим права на создание\n организации, указанной в параметре NARRA_GITEA_ORG (если она не создана ранее) OAuth2 приложений narra и drone (их CLIENT_ID и CLIENT_KEY будут сохранены в .env).  TOKEN используется однократно при выполнении make gitea-setup и нигде не сохраняется\nСм. также: Issue 22, Автоматизировать первичную настройку Gitea\nПримеры make init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # сервер для локального использования make init # изменение локального порта, по которому будет доступен postgresql (по умолчанию: 5433): make init PG_PORT_LOCAL=5434 # посмотреть .env без сохранения изменений make init CFG=tmp$$ DCAPE_VAR=tmp$$-var ACME=wild DNS=wild \u0026amp;\u0026amp; less tmp$$ \u0026amp;\u0026amp; rm -rf tmp$$* # сервер без gitea, с wildcard сертификатом make init ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  PDNS_LISTEN=192.168.23.10:53 \\  NARRA_GITEA_ORG=dcape \\  DRONE_ADMIN=lekovr \\  GITEA=https://it.domain.tld   Использование  make up - старт приложений  После выполнения этой команды все последующее администрирование среды и запущеных сервисов производится в www интерфейсе portainer.\nВместе с тем, в консоли доступны следующие команды:\n make - список доступных команд make down - остановка и удаление всех контейнеров make dc CMD=\u0026quot;up -d cis\u0026quot; - стартовать контейнер заданного приложения (если не запущен) make dc CMD=\u0026quot;rm -f -s cis\u0026quot;- остановить и удалить контейнер make dc CMD=\u0026quot;up -d --force-recreate cis\u0026quot; - пересоздать и стартовать контейнер и его зависимости make db-create NAME=ENFIST - создать в postgresql пользователя и БД из настроек enfist make db-drop NAME=ENFIST - удалить пользователя и БД из настроек enfist make apply PG_SOURCE_SUFFIX=-171014 - развернуть проект, используя резервные копии БД, созданные pg-backup  ","description":"Инструкция по установке","id":16,"section":"dcape","tags":null,"title":"Установка","uri":"http://dopos.github.io/dcape/gettingstarted/installation/"},{"content":"   Приложение enfist     Docker image   Назначение хранилище файлов конфигурации в postgresql с доступом через браузер и АПИ    ","description":"хранилище файлов конфигурации в postgresql с доступом через браузер и АПИ","id":17,"section":"dcape","tags":null,"title":"enfist","uri":"http://dopos.github.io/dcape/apps/enfist/"},{"content":"Аргументы \u0026lsquo;make init\u0026rsquo; Благодаря использованию Makefile, любой параметр dcape может быть задан в аргументах команды make init, после выполнения которой полный список переменных с их описанием и значениями доступен в файле с именем .env (или именем, заданном в параметре CFG).\nСледующие параметры имеют ключевое значение для конфигурации dcape:\nDCAPE_TAG  Идентификатор стека приложений, позволяющий изолировать его от других контейнеров docker (в т.ч. и от другой копии стека dcape если такая будет запущена на том же сервере) Префикс контейнеров стека (значение используется как COMPOSE_PROJECT_NAME)  DCAPE_DOMAIN  hostname для базовых приложений (narra, enfist, traefik) суффикс по умолчанию для hostname остальных приложений стека  GITEA  значения: [yes]|\u0026lt;URL\u0026gt; yes - добавить в конфигурацию локальный сервер gitea \u0026lt;URL\u0026gt; - адрес внешнего сервера gitea  DNS  значения: [no]|yes|wild добавить в конфигурацию локальный сервер powerdns wild - настроить зону для поддержки wildcard сертификатов letsencrypt  ACME  значения: [no]|http|wild включить поддержку сертификатов letsencrypt no - адреса сервисов dcape будут начинаться с http://, иначе - https:// wild - в конфигурацию traefik будет добавлена поддержка сертификатов для домена *.DCAPE_DOMAIN  NARRA_GITEA_ORG  username организации gitea, участникам которой будет предоставлен доступ к приватным ресурсам  DRONE_ADMIN  username пользователя gitea, который получит права администратора в drone  См. также  Файл конфигурации traefik для сертификатов только HTTP-01 и HTTP-01 + DNS-01  При выполнении команды make apply соответствующий файл конфигурации traefik копируется в var/traefik/traefik.yml с заменой переменных.\nЕсли файл var/traefik/traefik.yml уже существует, команды make не производит в нем никаких изменений.\n","description":"Параметры конфигурации","id":18,"section":"dcape","tags":null,"title":"Конфигурация","uri":"http://dopos.github.io/dcape/gettingstarted/configuration/"},{"content":"   Приложение narra     Docker image   Назначение сервис OAuth2 авторизации для учетных записей gitea, используемый для ограничения доступа к приватным ресурсам    ","description":"сервис OAuth2 авторизации для учетных записей gitea, используемый для ограничения доступа к приватным ресурсам","id":19,"section":"dcape","tags":null,"title":"narra","uri":"http://dopos.github.io/dcape/apps/narra/"},{"content":"   Приложение powerdns     Docker image   Назначение DNS-сервер для поддержки wildcard domain сертификатов    ","description":"DNS-сервер для поддержки wildcard domain сертификатов","id":20,"section":"dcape","tags":null,"title":"powerdns","uri":"http://dopos.github.io/dcape/apps/powerdns/"},{"content":"   Приложение portainer     Docker image   Назначение интерфейс к docker    ","description":"интерфейс к docker","id":21,"section":"dcape","tags":null,"title":"portainer","uri":"http://dopos.github.io/dcape/apps/portainer/"},{"content":"Markdown here\n","description":"test post","id":22,"section":"dcape","tags":null,"title":"App config","uri":"http://dopos.github.io/dcape/deploy/config/"},{"content":"Инструкция по развёртыванию приложений из исходного кода\n","description":"Инструкция по развёртыванию приложений из исходного кода","id":23,"section":"dcape","tags":null,"title":"Из исходного кода","uri":"http://dopos.github.io/dcape/deploy/own/"},{"content":"Markdown here\n","description":"test post","id":24,"section":"dcape","tags":null,"title":"Из образа docker","uri":"http://dopos.github.io/dcape/deploy/external/"}]