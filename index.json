[{"content":"Github: dcape\nRelease: v2.0.0, Ready to use\nЭтот релиз фиксирует завершение работ по переезду на traefik v2 и подготовке комплекта документации.\n","description":"Dcape v2.0","id":0,"section":"updates","tags":null,"title":"Январь 2021","uri":"http://dopos.github.io/updates/2021_january/"},{"content":"Github: dcape\nRelease: v1.1, Two years in production\nЭтот релиз фиксирует состояние проекта перед началом работ по переезду на traefik v2. Дальнейшее развитие будет производиться в одноименной ветке репозитория.\n","description":"Dcape v1.1","id":1,"section":"updates","tags":null,"title":"Ноябрь 2020","uri":"http://dopos.github.io/updates/2020_november/"},{"content":"v1.0.0-rc2 Date: 2018-09-23\nGithub: dcape\nRelease: v1.0.0-rc2, Use apisite\nИзменено  apps/enfist: вместо pgrpc теперь используется apisite  Установка обновления 1 2 3 4 5  git pull mv .env .env.bak make init make enfist-apply make up   ","description":"Dcape v1.0.0-rc2","id":2,"section":"updates","tags":null,"title":"Сентябрь 2018","uri":"http://dopos.github.io/updates/2018_september/"},{"content":"v1.0.0-rc1 Date: 2017-10-22\nGithub: dcape\nRelease: v1.0.0-rc1, Ready to use\nИзменено  apps/traefik*: в настройки вынесен редирект 80 -\u0026gt; 443 apps/traefik теперь не совместим по конфигу с apps/traefik-acme, при переключении необходим make init  v0.10 Date: 2017-10-19\nИзменено  apps/cis: добавлено создание каталогов var/apps, var/log в cis-apply apps/cis: изменена версия webtail (0.12) apps/enfist: исправлено обновление sql-пакетов enfist,rpc и их текущие версии  Добавлено  Файл CHANGELOG.md README.md: информация о зависимости (gawk), уточнен блок \u0026ldquo;Быстрый старт\u0026rdquo; DEPLOY.md: блоки \u0026ldquo;Информация для разработчика\u0026rdquo;, \u0026ldquo;Удаление деплоя\u0026rdquo; Makefile: поддержка параметров PG_PORT_LOCAL, CFG_BAK  Установка обновления 1 2 3 4 5 6 7 8 9 10  git pull mv .env .env.bak make init # Тут будет предупреждение об устаревшей версии webtail - надо изменить на новую в .env make enfist-apply # Сообщения \u0026#34;ERROR: Newest lib version (0.1) loaded already\u0026#34; игнорируем, других ошибок быть не должно make dc CMD=\u0026#34;up -d webtail\u0026#34;   ","description":"Dcape v1.0.0-rc1","id":3,"section":"updates","tags":null,"title":"Октябрь 2017","uri":"http://dopos.github.io/updates/2017_october/"},{"content":"Github: dcape\nCommit: v0.1, code working in general\nНачало опытной эксплуатации dcape.\n","description":"Первый релиз проекта dcape","id":4,"section":"updates","tags":null,"title":"Август 2017","uri":"http://dopos.github.io/updates/2017_august/"},{"content":"Github: fidm\nCommit: init\nНачало разработки аналога fig, утилиты для управления контейнерами Docker, которая была доступна на сайте fig.sh.\n","description":"Первый commit в проекте fidm","id":5,"section":"updates","tags":null,"title":"Февраль 2015","uri":"http://dopos.github.io/updates/2015_february/"},{"content":"Github: consup\nCommit: init\nНачало работ по построению решения для автоматизации работы с контейнерами docker.\n","description":"Первый commit в проекте consup","id":6,"section":"updates","tags":null,"title":"Ноябрь 2014","uri":"http://dopos.github.io/updates/2014_november/"},{"content":"   Приложение traefik     Docker image   Назначение агрегация и проксирование www-сервисов развернутых приложений по заданному имени с поддержкой сертификатов Let\u0026rsquo;s Encrypt    Назначение Traefik - ключевой сервис dcape. Он решает задачи:\n при запуске контейнера проанализировать его метки (label) и добавить контейнер в систему проксирования внешних http(s) запросов, определяя целевой контейнер по имени хоста в запросе если конфигурацией предусмотрена работа через TLS - проверить наличие сертификата и, при необходимости, получить или обновить его через сервис Let\u0026rsquo;s Encrypt  Особенности Варианты файла конфигурации В составе dcape есть три варианта файла конфигурации traefik\n traefik.local.yml - использование DCAPE на локальном компьютере без поддержки TLS traefik.acme-http.yml - https с получением сертификатов по протоколу HTTP-01 traefik.acme.yml - https с получением сертификатов по протоколу HTTP-01 и DNS-01 (для поддержки wildcard-доменов)  При выполнении команды make apply, по значению параметра ACME определяется вариант конфигурации и соответствующий файл копируется в var/traefik/traefik.yml с заменой переменных. Если файл var/traefik/traefik.yml уже существует, команда make apply не производит в нем никаких изменений.\nОграничение видимости контейнеров Для того, чтобы конкретный экземпляр traefik отреагировал на запуск контейнера, в конфигурации контейнера надо указать две метки:\n1 2 3  labels:- traefik.enable=true- dcape.traefik.tag=${DCAPE_TAG}  Если не задана первая из этих меток, контейнер не будет виден никакому экземпляру traefik. Значение второй метки позволяет запустить на одном хосте несколько экземпляров traefik и привязывать контейнер только к тому экземпляру, у которого совпадает значение DCAPE_TAG.\nТакая функциональность обеспечивается следующими настройками traefik:\n1 2 3 4  providers:docker:exposedByDefault:falseconstraints:Label(`dcape.traefik.tag`,`=DCAPE_TAG=`)  Поддержка wildcard-доменов Dcape поддерживает протокол TLS с использованием ключей Let\u0026rsquo;s Encrypt.\nДля получения сертификатов по протоколу DNS-01 необходим доступ к АПИ сервера DNS. В состав dcape для этого включен сервер powerdns. Если параметр ACME имеет значение wild, при выполнении команды make apply создается файл var/traefik/traefik.env с настройками для доступа к АПИ локальной копии powerdns\nНастройки контейнера для работы с TLS Ниже в примерах использованы следующие параметры конфигурации:\n APP_TAG - уникальный тег контейнера, может формироваться автоматически из значения APP_SITE USE_TLS - использовать TLS APP_SITE - основной hostname контейнера APP_ACME_DOMAIN - wildcard-домен контейнера  HTTP-01, индивидуальные сертификаты 1 2  labels:- traefik.http.routers.${APP_TAG}.tls=${USE_TLS}  DNS-01, wildcard-домен 1 2 3 4 5  labels:- traefik.http.routers.${APP_TAG}.tls=${USE_TLS}- traefik.http.routers.${APP_TAG}.tls.certresolver=letsEncrypt- traefik.http.routers.${APP_TAG}.tls.domains[0].main=${APP_SITE}- traefik.http.routers.${APP_TAG}.tls.domains[0].sans=${APP_ACME_DOMAIN}  Тестирование Файл конфигурации traefik включает строку\n1  # caServer: \u0026#34;https://acme-staging-v02.api.letsencrypt.org/directory\u0026#34;  В период настройки, во избежание бана со стороны Letsencrypt, рекомендуется ее раскомментировать для работы через тестовый канал (выписывается Fake сертификат), а после полной отладки механизма, удалить.\nНесколько копий dcape на одном сервере dcape позволяет запуск нескольких экемпляров на одном сервере, для этого они должны использовать разные порты. Поэтому TLS с обновлением сертификатов будет доступен только тому экземпляру, который слушает порт 443.\nДля запуска второго экземпляра необходимо разместить его в другом каталоге (или использовать другие значения параметров CFG, DCAPE_VAR) и изменить в его настройках:\n порты в параметрах TRAEFIK_LISTEN и TRAEFIK_LISTEN_SSL параметр DCAPE_TAG  ","description":"агрегация и проксирование www-сервисов развернутых приложений по заданному имени с поддержкой сертификатов Let's Encrypt","id":7,"section":"dcape","tags":null,"title":"traefik","uri":"http://dopos.github.io/dcape/baseapps/traefik/"},{"content":"Используемые файлы Как правило, приложение в среде dcape содержит файлы:\n Makefile с командами  ${CFG}.sample - создание файла конфигурации запуска для размещения его в enfist (используется в setup config) .drone-up - старт контейнера, используется в .drone.yml   docker-compose.yml - конфигурация сервисов docker, используемых для сборки и запуска приложений, с инструкциями для интеграции с traefik  Алгоритм настройки Настройка dcape для разворачивания приложения состоит из следующих шагов:\n создать репозиторий (или зеркало) в gitea активировать репозиторий в drone целевого сервера выполнить git push (или тест вебхука) отредактировать конфигурацию и сохранить ее под именем без суффикса .sample повторить git push (или тест вебхука) - приложение будет развернуто на целевом сервере  После этого push в репозиторий проекта будет приводить к разворачиванию/обновлению приложения в среде dcape.\nДля развертывания приложения в среде dcape, оно должно поддерживать интеграцию с тремя подсистемами:\n traefik drone enfist  Ниже описаны примеры такий интеграции\nИнтеграция с traefik Производится с помощью меток контейнера.\nПример docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  version:\u0026#39;2\u0026#39;services:www:image:${IMAGE}:${IMAGE_VER}labels:- traefik.enable=true- dcape.traefik.tag=${DCAPE_TAG}- traefik.http.routers.${APP_TAG}.rule=Host(`${APP_SITE:?Must be set}`) || Host(`www.${APP_SITE}`)# TLS support- traefik.http.routers.${APP_TAG}.tls=${USE_TLS}# use wildcard-domain- traefik.http.routers.${APP_TAG}.tls.certresolver=letsEncrypt- traefik.http.routers.${APP_TAG}.tls.domains[0].main=${APP_SITE}- traefik.http.routers.${APP_TAG}.tls.domains[0].sans=${APP_ACME_DOMAIN}# Redirect www.domain.tld -\u0026gt; domain.tld- traefik.http.middlewares.${APP_TAG}-redirwww.redirectregex.regex=^http(s?)://www.${APP_SITE}/(.*)- traefik.http.middlewares.${APP_TAG}-redirwww.redirectregex.replacement=http$${1}://${APP_SITE}/$${2}- traefik.http.routers.${APP_TAG}.middlewares=${APP_TAG}-redirwwwvolumes:# Use TZ from host config- /etc/timezone:/etc/timezone:ro- /etc/localtime:/etc/localtime:ro# Attach site content- ${APP_ROOT}/html:/usr/share/nginx/html:rorestart:alwaysnetworks:- lannetworks:lan:external:name:${DCAPE_NET}   Пояснения по строкам  8: активация traefik для контейнера 9: привязка контейнера к конкретному экземпляру traefik  Интеграция с drone Производится с помощью файла .drone.yml, который размещается в корне репозитория.\nПример .drone.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ---kind:pipelinetype:dockername:websitesteps:- name:deploy_localpull:neverimage:${DCAPE_COMPOSE}commands:- . setup config- . setup root- make .drone-upvolumes:- name:dockersockpath:/var/run/docker.sockvolumes:- name:dockersockhost:path:/var/run/docker.sock   Пояснения по строкам  10: использовать для развертывания образ dcape_drone-compose (создается при установке dcape) 12: интеграция с enfist 13: создание персистентного каталога 14: запуск drone-compose  Интеграция с enfist enfist - это сервис хранения файлов конфигурации, которые в dcape имеют имя .env. Соответственно, приложение должно уметь работать с конфигурацией, размещенной в таком файле. В части переменных, используемых в docker-compose.yml, формат файла должен соответствовать docker-compose env_file.\nФайл .env c переменными для docker-compose.yml и другими переменными для запуска приложения не размещается в репозитории, работа с ним при деплое осуществляется командой setup config:\n если в enfist нет конфигурации для текущей комбинации \u0026ldquo;организация-репозиторий-ветка\u0026rdquo;, выполняется make .env.sample (если в репозитории нет .env.sample) и полученный файл сохраняется в enfist с именем \u0026ldquo;организация-репозиторий-ветка.sample\u0026rdquo; иначе - конфигурация из enfist выгружается в файл .env  Для каждой ветки репозитория создается своя конфигурация запуска.\nОбновление и удаление развернутого приложения В случае, если префикс (DCAPE_TAG) и имя (APP_TAG) приложения не изменились - контейнер будет остановлен и удален обновлении приложения. В остальных случаях управление контейнерами и образами может прибыть произведено через portainer\nСм. также  Актуальный список адаптированных приложений dcape  ","description":"Адаптация приложения для развертывания в среде dcape","id":8,"section":"dcape","tags":null,"title":"Приложения","uri":"http://dopos.github.io/dcape/usage/apps/"},{"content":"Зачем это нужно Цель создания dcape - получить относительно удобный способ запуска docker-приложений простой короткой командой, например\n make up - локально git push - удаленно  Главная проблема была в том, как повесить несколько контейнеров на порт 80, чтобы запросы к ним проксировались по имени хоста не на основании заранее руками созданного конфига, а по факту старта контейнера - эту задачу решил traefik.\nБонусом он добавил TLS, т.е. возможность получения сертификата для хоста или, когда хостов много - для домена (т.е. wildcard-домена)\nПри использовании traefik приложение может управлять своей доступностью извне посредством меток (label) docker-контейнера, задавать которые можно в файле docker-compose.yml\nПроект dcape - это попытка достичь требуемых целей с помощью traefik, docker-compose и минимального количества дополнительного кода.\nКак это выглядит Развертывание dcape имеет результатом 2 файла - docker-compose.yml и .env, которые позволяют командой make up запустить весь стек выбранных для конкретного сервера приложений. Все эти приложения доступны на dockerhub и все нужное для их запуска командой docker-compose up может быть подготовлено вручную, однако dcape добавляет в процесс подготовки такого решения следующие преимущества:\n файл параметров (.env) формируется программно, что позволяет  использовать в значениях переменные генерировать необходимые приложениям пароли и токены формировать взаимосвязанные настройки приложений   файл конфигурации контейнеров (docker-compose.yml) формируется программно, что позволяет параметризовать список приложений для каждой инсталляции, в частности  если разворачивается группа серверов различного назначения, gitea достаточно развернуть только на одном из них, а на остальных вместо make init выполнять make init GITEA=https://git.domain.tld если для сервера не нужен SSL (например, в локальной сети), не указывать параметр ACME если для сервера не нужен DNS (например, wildcard сертификаты не используются или их поддержка не использует локальный DNS), не указывать параметр DNS   использование make позволяет перед стартом приложения выполнять его инициализацию, включая  создание БД (и, при необходимости, загрузку дампа БД) формирование файлов конфигураций по шаблонам регистрацию OAuth2 приложений    ","description":"Какие задачи решает проект","id":9,"section":"dcape","tags":null,"title":"Назначение","uri":"http://dopos.github.io/dcape/purpose/"},{"content":"В случае, если уже\n настроен DNS c поддержкой wildcard-сертификатов SSL есть сервер gitea (в примере - it.domain.tld) в gitea создан TOKEN на новом сервере установлены зависимости  , установка dcape на этом новом сервере может быть произведена так:\n1 2 3 4 5 6 7 8 9  git clone -b v2 --single-branch --depth 1 https://github.com/dopos/dcape.git cd dcape make install ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  NARRA_GITEA_ORG=dcape \\  DRONE_ADMIN=lekovr \\  PDNS_LISTEN=192.168.23.10:53 \\  GITEA=https://it.domain.tld \\  TOKEN=**token_from_gitea**   В PDNS_LISTEN порт изменен на стандартный (по умолчанию: 54) и задан ip, чтобы не возникало конфликта с локальным резолвером.\n","description":"Как развернуть dcape, если уже есть gitea и DNS","id":10,"section":"dcape","tags":null,"title":"Быстрый старт","uri":"http://dopos.github.io/dcape/gettingstarted/quickstart/"},{"content":"   Приложение postgresql     Docker image   Назначение хранение конфигураций всех приложений и размещение баз данных приложений, которым требуется СУБД    Назначение СУБД postgresql используется следующими сервисами dcape:\n gitea drone enfist powerdns  Кроме этого, контейнер доступен для других приложений, развертываемых под dcape.\nОсобенности Размещение файлов Постоянные данные контейнера размещаются в каталоге var/db в следующих подкаталогах:\n data - внутренние файлы postgresql init - скрипты, которые выполняются при старте контейнера backup - размещение дампов баз для импорта/экспорта conf.d - каталог дополнений в конфигурацию, активируется вручную параметром include_dir файла postgresql.conf shared - каталог для размещения расширений перед их ручной активацией  Резервные копии Для резервного копирования баз данных используется приложение pg-backup которое ежедневно (по крону) делает дампы указанных в настройка баз и размещает их в формате .tgz в каталоге var/db/backup\nПример использования Пример приложения, использующего postgresql - dcape-app-mattermost\nВ файле Makefile к СУБД относятся следующие цели:\n docker-wait - ожидание запуска контейнера postgresql и готовности СУБД db-create - создание пользователя и БД, после создания БД - импорт дампа, если он задан в настройках db-drop - удаление БД и пользователя psql - запуск psql из запущенного контейнера postgresql c присоединением к БД приложения  ","description":"хранение конфигураций всех приложений и размещение баз данных приложений, которым требуется СУБД","id":11,"section":"dcape","tags":null,"title":"postgresql","uri":"http://dopos.github.io/dcape/baseapps/postgresql/"},{"content":"Если dcape был установлен командой git clone, для его обновления используется команда git pull, после выполнения которой необходимо обновить файл .env\nОбновление файла .env При обновлении проекта возможно появление новых переменных в .env файле.\nАлгоритм обновления .env с сохранением старых настроек:\n1 2  mv .env .env.bak make init   Другой вариант:\n1 2  mv .env .env.1019 make init CFG_BAK=.env.1019   Все совпадающие значения будут взяты из .env.bak (т.е. из старого конфига).\nЕсли изменятся номера версий используемых docker-образов базовых приложений, будут выведены предупреждения.\nОбновление версий базовых приложений Для того, чтобы обновить все номера версий используемых docker-образов базовых приложений, сохранив остальные настройки, надо подготовить .env.bak, убрав из него номера версий:\n1 2 3  grep -v \u0026#34;_VER=\u0026#34; .env \u0026gt; .env.bak mv .env .env.pre make init   Резервирование .env в enfist Настройки dcape/.env не сохраняются в enfist автоматически, но это можно сделать вручную:\n1 2  ln -s .env dcape.env make env-set TAG=dcape   ","description":"Обновление dcape и версий базовых приложений","id":12,"section":"dcape","tags":null,"title":"Обновление","uri":"http://dopos.github.io/dcape/usage/update/"},{"content":"Зависимости  linux 64bit с git, make, sed, curl, jq docker  docker-compose используется в dcape в формате docker-образа, поэтому отдельной установки не требует.\nПример установки зависимостей:\ndocker 1 2 3 4  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs)stable\u0026#34; sudo apt install docker-ce docker-ce-cli containerd.io sudo usermod -a -G docker $USER   См. также: Install docker\nmake, git, sed, curl, jq 1  sudo apt install make git sed curl jq   ","description":"Приложения, необходимые для установки dcape","id":13,"section":"dcape","tags":null,"title":"Зависимости","uri":"http://dopos.github.io/dcape/gettingstarted/dependencies/"},{"content":"   Приложение gitea     Docker image   Назначение git совместимый сервис для работы с репозиториями (если используется несколько серверов, разворачивается только на одном)    Gitea - это сервис управления git-репозиториями, который поддерживает\n интеграцию с сервисом развертывания приложений (drone) функционал OAuth2 сервера для интеграции с narra  ","description":"git совместимый сервис для работы с репозиториями","id":14,"section":"dcape","tags":null,"title":"gitea","uri":"http://dopos.github.io/dcape/baseapps/gitea/"},{"content":"Т.к. dcape разворачивает несколько независимых сервисов, их имена должны быть прописаны в DNS. Предпочтительным является вариант регистрации wildcard domain, но можно и регистрировать индивидуально.\nПример имен для сервера srv1.domain.tld:\n srv1.domain.tld - для фронтендов narra, enfist, traefik git.srv1.domain.tld - для gitea drone.srv1.domain.tld - для drone port.srv1.domain.tld - для portainer ns.srv1.domain.tld - для powerdns  /etc/hosts Вариант для случая, когда dcape разворачивается и используется на локальном компьютере, в т.ч. в случае, когда у этого компьютера нет сетевых интерфейсов.\nТ.к. базовые приложения dcape общаются между собой, их hostname нельзя привязать к loopback-интерфейсу. В качестве ip-адреса можно использовать шлюз подсети dcape, которая задается параметром DCAPE_SUBNET (по умолчанию подсеть - 100.127.0.0/24 и шлюз - 100.127.0.1):\n1 2  grep -q \u0026#34; dev.lan\u0026#34; /etc/hosts || \\ sudo bash -c \u0026#39;for n in \u0026#34;\u0026#34; git drone port ns ; do [ \u0026#34;$n\u0026#34; ] \u0026amp;\u0026amp; n=\u0026#34;$n.\u0026#34; ; echo \u0026#34;100.127.0.1 ${n}dev.lan\u0026#34; \u0026gt;\u0026gt; /etc/hosts ; done\u0026#39;   dnsmasq В случае использования локальной сети, когда известен ip-адрес компьютера с dcape (в примере - 192.168.1.2) и установлен dns-сервер dnsmasq, можно создать локальный wildcard-domain:\n1 2  sudo bash -c \u0026#39;echo \u0026#34;address=/.dev.lan/192.168.1.2\u0026#34; \u0026gt; /etc/NetworkManager/dnsmasq.d/dev.lan.conf\u0026#39; sudo service network-manager reload   DNS зона индивидуальная регистрация srv1.domain.tld. A 19.72.10.23 git.srv1.domain.tld. A 19.72.10.23 drone.srv1.domain.tld. A 19.72.10.23 port.srv1.domain.tld. A 19.72.10.23 ns.srv1.domain.tld. A 19.72.10.23 wildcard-domain srv1.domain.tld. A 19.72.10.23 *.srv1.domain.tld. A 19.72.10.23 wildcard-domain с делегированием зоны Для регистрации wildcard сертификатов traefik производит изменения в DNS-зоне через АПИ DNS-сервера. Чтобы не давать ему доступ к основной DNS-зоне, можно для каждого сервера создать выделенную зону (в примере - srv1.domain.tld) и директивой CNAME делегировать управление сертификатами этой зоны отдельному серверу (в примере - серверу ns.srv1.domain.tld, т.е. локальному DNS). Используемая в dcape v2 версия traefik это уже поддерживает.\nsrv1.domain.tld. A 19.72.10.23 *.srv1.domain.tld. A 19.72.10.23 acme-srv1.domain.tld. NS ns.srv1.domain.tld _acme-challenge.srv1.domain.tld. CNAME acme-srv1.domain.tld _acme-challenge.*.srv1.domain.tld. CNAME acme-srv1.domain.tld Команда инициализации dcape для этого примера:\n1 2 3  make init ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  PDNS_LISTEN=19.72.10.23:53   В PDNS_LISTEN порт изменен на стандартный (по умолчанию: 54) и задан ip, чтобы не возникало конфликта с локальным резолвером.\nСм. также: настройка связки taefik-powerdns для DNS=wild\n","description":"Варианты настройки DNS","id":15,"section":"dcape","tags":null,"title":"Настройка DNS","uri":"http://dopos.github.io/dcape/gettingstarted/dns/"},{"content":"   Приложение drone     Docker image   Назначение деплой приложений по событию из gitea    Как это работает  Приложения (собственные исходные тексты или файлы конфигурации стороннего ПО) размещаются в репозитории на github.com или аналогичном сервисе управления git-репозиториями (может использоваться встроенное приложение gitea, или собственный аналогичный сервис). При установке drone указывается адрес сервиса управления git-репозиториями В интерфейсе drone активируется нужный git-репозиторий При пуше коммита в репозиторий, сервис управления активирует webhook всех подключенных копий drone Webhook drone клонирует репозиторий и выполняет инструкции из файла .drone.yml в контексте сервиса, заданного параметром type. Этот сервис должен быть запущен вместе с drone, в dcape в качестве такого сервиса используется drone-runner-docker  Особенности  если контейнеру надо монтировать каталоги, при активации в drone репозиторию надо поставить флаг Trusted (это может сделать пользователь, указанный в параметре DRONE_ADMIN, в противном случае этому пользователю будет отправлен запрос на разрешение развертывания) при установке drone в dcape создается образ dcape_drone-compose, который может быть использован для старта контейнеров кроме docker-compose и make, образ dcape_drone-compose включает утилиту setup, которая поддерживает 2 команды:  config - создание или скачивание конфигурации приложения из enfist root - создание каталога на хостовой системе и помещение пути к нему в переменную APP_ROOT    Переменные среды drone-docker-runner  DCAPE_TAG - тег текущей копии dcape, значение из .env DCAPE_NET - имя сети dcape, значение из .env DCAPE_COMPOSE - имя образа dcape_drone-compose для текущей копии dcape DCAPE_ROOT - путь к каталогу var (/opt/dcape/var) хостовой системе, который примонтирован по этому же пути  Пример .drone.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ---kind:pipelinetype:dockername:websitesteps:- name:deploy_localpull:neverimage:${DCAPE_COMPOSE}commands:- . setup config- . setup root- make .drone-upvolumes:- name:dockersockpath:/var/run/docker.sockvolumes:- name:dockersockhost:path:/var/run/docker.sock   См также: .drone.yml\n","description":"деплой приложений по событию из gitea","id":16,"section":"dcape","tags":null,"title":"drone","uri":"http://dopos.github.io/dcape/baseapps/drone/"},{"content":"Исходники Рекомендуемым способом копирования файлов на сервер является выполнение git clone. Это позволяет в будущем\n обновить исходники для получения информации о проверенных новых версиях используемых приложений увидеть локальные изменения исходников, если их понадобится сделать  1 2 3 4  cd /opt sudo mkdir dcape \u0026amp;\u0026amp; sudo chown $USER dcape git clone -b v2 --single-branch --depth 1 https://github.com/dopos/dcape.git cd dcape   Настройка и запуск Локальный сервер Вариант без поддержки SSL, но с установкой gitea. Выполняется в 3 шага, т.к. на шаге 2 необходимо использовать браузер для\n завершения установки gitea создания API TOKEN  Шаг 1. Подготовка к запуску gitea 1 2 3  make init DCAPE_DOMAIN=srv1.domain.tld make apply make up   Шаг 2. Запуск и настройка gitea  открыть GITEA_URL, нажать \u0026ldquo;вход\u0026rdquo; - откроется страница параметров установки ввести логин и пароль учетной записи (логин должен совпадать со значением DRONE_ADMIN) создать токен (Настройки -\u0026gt; Приложения -\u0026gt; Генерировать токен)  Шаг 3. Запуск dcape 1 2  make gitea-setup TOKEN=... make up   TOKEN - ключ АПИ gitea, который создается вручную пользователем, имеющим права на создание\n организации, указанной в параметре NARRA_GITEA_ORG (если она не создана ранее) OAuth2 приложений narra и drone (их CLIENT_ID и CLIENT_KEY будут сохранены в .env).  TOKEN используется однократно при выполнении make gitea-setup и нигде не сохраняется\nСм. также: Issue 22, Автоматизировать первичную настройку Gitea\nПримеры make init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # сервер для локального использования make init # изменение локального порта, по которому будет доступен postgresql (по умолчанию: 5433): make init PG_PORT_LOCAL=5434 # посмотреть .env без сохранения изменений make init CFG=tmp$$ DCAPE_VAR=tmp$$-var ACME=wild DNS=wild \u0026amp;\u0026amp; less tmp$$ \u0026amp;\u0026amp; rm -rf tmp$$* # сервер без gitea, с wildcard сертификатом make init ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  PDNS_LISTEN=192.168.23.10:53 \\  NARRA_GITEA_ORG=dcape \\  DRONE_ADMIN=lekovr \\  GITEA=https://it.domain.tld   Использование  make up - старт приложений  После выполнения этой команды все последующее администрирование среды и запущеных сервисов производится в www интерфейсе portainer.\nВместе с тем, в консоли доступны следующие команды:\n make - список доступных команд make down - остановка и удаление всех контейнеров make dc CMD=\u0026quot;up -d cis\u0026quot; - стартовать контейнер заданного приложения (если не запущен) make dc CMD=\u0026quot;rm -f -s cis\u0026quot;- остановить и удалить контейнер make dc CMD=\u0026quot;up -d --force-recreate cis\u0026quot; - пересоздать и стартовать контейнер и его зависимости make db-create NAME=ENFIST - создать в postgresql пользователя и БД из настроек enfist make db-drop NAME=ENFIST - удалить пользователя и БД из настроек enfist make apply PG_SOURCE_SUFFIX=-171014 - развернуть проект, используя резервные копии БД, созданные pg-backup  ","description":"Инструкция по установке","id":17,"section":"dcape","tags":null,"title":"Установка","uri":"http://dopos.github.io/dcape/gettingstarted/installation/"},{"content":"   Приложение enfist     Docker image   Назначение хранилище файлов конфигурации в postgresql с доступом через браузер и АПИ    Enfist - это сервис хранения конфигураций приложений. Конфигурации хранятся в БД в виде Key-value хранилища, где ключ формируется из адреса git репозитория organization--name_of_repo--branch (организация--проект--ветка), а значение - содержимое .env файла.\nДоступ к хранилищу ограничивается narra и осуществляется через фронтенд dcape.\nКроме веб-интерфейса, работа с конфигурациями запуска может осуществляться через dcape-config-cli.\nПримеры команд, доступных после клонирования (git clone) и настройки (make .env) dcape-config-cli:\n make get TAG=name - получить из хранилища конфигурацию для тега name и сохранить в файл name.env make set TAG=name - загрузить файл name.env в хранилище с тегом name  Тег содержит значение равное ключу БД Key-value хранилища organization--name_of_repo--branch (организация--проект--ветка)\nВ файле конфигурации dcape-config-cli задается два параметра:\n ENFIST_URL - адрес сервиса enfist CIS_TOKEN - токен для авторизации в gitea  ","description":"хранилище файлов конфигурации в postgresql с доступом через браузер и АПИ","id":18,"section":"dcape","tags":null,"title":"enfist","uri":"http://dopos.github.io/dcape/baseapps/enfist/"},{"content":"Аргументы \u0026lsquo;make init\u0026rsquo; Благодаря использованию Makefile, любой параметр dcape может быть задан в аргументах команды make init, после выполнения которой полный список переменных с их описанием и значениями доступен в файле с именем .env (или именем, заданном в параметре CFG).\nСледующие параметры имеют ключевое значение для конфигурации dcape:\nDCAPE_TAG  Идентификатор стека приложений, позволяющий изолировать его от других контейнеров docker (в т.ч. и от другой копии стека dcape если такая будет запущена на том же сервере) Префикс контейнеров стека (значение используется как COMPOSE_PROJECT_NAME)  DCAPE_DOMAIN  hostname для базовых приложений (narra, enfist, traefik) суффикс по умолчанию для hostname остальных приложений стека  GITEA  значения: [yes]|\u0026lt;URL\u0026gt; yes - добавить в конфигурацию локальный сервер gitea \u0026lt;URL\u0026gt; - адрес внешнего сервера gitea  DNS  значения: [no]|yes|wild добавить в конфигурацию локальный сервер powerdns wild - настроить зону для поддержки wildcard сертификатов letsencrypt  ACME  значения: [no]|http|wild включить поддержку сертификатов letsencrypt no - адреса сервисов dcape будут начинаться с http://, иначе - https:// wild - в конфигурацию traefik будет добавлена поддержка сертификатов для домена *.${DCAPE_DOMAIN}  NARRA_GITEA_ORG  username организации gitea, участникам которой будет предоставлен доступ к приватным ресурсам  DRONE_ADMIN  username пользователя gitea, который получит права администратора в drone  См. также  Варианты файла конфигурации traefik  ","description":"Параметры конфигурации","id":19,"section":"dcape","tags":null,"title":"Конфигурация","uri":"http://dopos.github.io/dcape/gettingstarted/configuration/"},{"content":"   Приложение narra     Docker image   Назначение сервис OAuth2 авторизации для учетных записей gitea, используемый для ограничения доступа к приватным ресурсам    Narra - это OAuth2 прокси для учетных записей gitea, который используется для ограничения доступа к приватным ресурсам:\n фронтенд traefik enfist - сервис хранения конфигураций приложений статистика использования powerdns  ","description":"сервис OAuth2 авторизации для учетных записей gitea, используемый для ограничения доступа к приватным ресурсам","id":20,"section":"dcape","tags":null,"title":"narra","uri":"http://dopos.github.io/dcape/baseapps/narra/"},{"content":"Dcape v2 отличается от v1 переездом деплоя на drone и сменой версии traefik на v2.\nПодробнее об изменениях:\nВерсия traefik  Было: 1.7 Стало: 2.0  В результате изменились\nНастройки в docker-compose Теперь для привязки настроек к контейнеру необходимо в имя добавлять уникальное имя приложения для всех приложений, работающих с одной копией traefik. Для этого добавлен параметр APP_TAG, который может быть рассчитан автоматически по hostname ресурса. Этот же параметр можно использовать как префикс всех контейнеров приложения (значение ключа -p команды docker-compose)\nПоддержка TLS Теперь для добавления TLS достаточно добавить в блок labels файла docker-compose.yml строку вида\n1  - traefik.http.routers.${APP_TAG}.tls=${USE_TLS}  Кроме этого, поддержка wildcard-domain теперь доступна \u0026ldquo;из коробки\u0026rdquo; и реализована дополнительным сервисом (powerdns) которым traefik управляет через АПИ.\nАвторизация для приватных ресурсов Ранее осуществлялась через API gitea, теперь gitea выступает OAuth2-сервером. Это добавило необходимость регистрировать в gitea приложения (narra, drone) и разрешать их использование для каждого пользователя.\nСервис развертывания  Было: webhook + webtail с командами make start-hook и make update (make использует /bin/bash) Стало: drone и .drone.yml (make использует /bin/sh)  Основным способом для остановки контейнера и удаления образа теперь является portainer.\n","description":"Отличия dcape версии 2 от версии 1","id":21,"section":"dcape","tags":null,"title":"Отличия dcape v2","uri":"http://dopos.github.io/dcape/gettingstarted/v2changes/"},{"content":"   Приложение powerdns     Docker image   Назначение DNS-сервер для поддержки wildcard domain сертификатов    powerdns - это DNS сервер, который поддерживает\n хранение зон в БД (пример приложения управления зонами - dcape-dns-config) управление зонами по АПИ (используется в dcape для поддержки wildcard-доменов)  ","description":"DNS-сервер для поддержки wildcard domain сертификатов","id":22,"section":"dcape","tags":null,"title":"powerdns","uri":"http://dopos.github.io/dcape/baseapps/powerdns/"},{"content":"   Приложение portainer     Docker image   Назначение интерфейс к docker    portainer - это инструмент для управления инфраструктурой docker (образами, контейнерами, томами и т.д.).\nОн не используется никакими другими сервисами dcape и включен для удобства эксплуатации серверов.\n","description":"интерфейс к docker","id":23,"section":"dcape","tags":null,"title":"portainer","uri":"http://dopos.github.io/dcape/baseapps/portainer/"}]