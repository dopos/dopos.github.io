[{"content":"dcape v2.1.1 Release: v2.1.1\ndcape v2.1.0 Github: dcape\nRelease: v2.1.0\ndocker-образы вспомогательных сервисов теперь размещены на ghcr и собираются для архитектур linux/amd64, linux/arm/v7, linux/arm64 первично протестирована поддержка для linux/arm64 обновлены версии используемых приложений ","description":"Dcape v2.1.0","id":0,"section":"updates","tags":null,"title":"Ноябрь 2021","uri":"https://dopos.github.io/updates/2021_november/"},{"content":"Github: dcape\nRelease: v2.0.0\nЭтот релиз фиксирует завершение работ по переезду на traefik v2 и подготовке русскоязычной части документации.\n","description":"Dcape v2.0.0","id":1,"section":"updates","tags":null,"title":"Январь 2021","uri":"https://dopos.github.io/updates/2021_january/"},{"content":"Github: dcape\nRelease: v1.1, Two years in production\nЭтот релиз фиксирует состояние проекта перед началом работ по переезду на traefik v2. Дальнейшее развитие будет производиться в одноименной ветке репозитория.\n","description":"Dcape v1.1","id":2,"section":"updates","tags":null,"title":"Ноябрь 2020","uri":"https://dopos.github.io/updates/2020_november/"},{"content":"v1.0.0-rc2 Date: 2018-09-23\nGithub: dcape\nRelease: v1.0.0-rc2, Use apisite\nИзменено apps/enfist: вместо pgrpc теперь используется apisite Установка обновления 1 2 3 4 5 git pull mv .env .env.bak make init make enfist-apply make up ","description":"Dcape v1.0.0-rc2","id":3,"section":"updates","tags":null,"title":"Сентябрь 2018","uri":"https://dopos.github.io/updates/2018_september/"},{"content":"v1.0.0-rc1 Date: 2017-10-22\nGithub: dcape\nRelease: v1.0.0-rc1, Ready to use\nИзменено apps/traefik*: в настройки вынесен редирект 80 -\u0026gt; 443 apps/traefik теперь не совместим по конфигу с apps/traefik-acme, при переключении необходим make init v0.10 Date: 2017-10-19\nИзменено apps/cis: добавлено создание каталогов var/apps, var/log в cis-apply apps/cis: изменена версия webtail (0.12) apps/enfist: исправлено обновление sql-пакетов enfist,rpc и их текущие версии Добавлено Файл CHANGELOG.md README.md: информация о зависимости (gawk), уточнен блок \u0026ldquo;Быстрый старт\u0026rdquo; DEPLOY.md: блоки \u0026ldquo;Информация для разработчика\u0026rdquo;, \u0026ldquo;Удаление деплоя\u0026rdquo; Makefile: поддержка параметров PG_PORT_LOCAL, CFG_BAK Установка обновления 1 2 3 4 5 6 7 8 9 10 git pull mv .env .env.bak make init # Тут будет предупреждение об устаревшей версии webtail - надо изменить на новую в .env make enfist-apply # Сообщения \u0026#34;ERROR: Newest lib version (0.1) loaded already\u0026#34; игнорируем, других ошибок быть не должно make dc CMD=\u0026#34;up -d webtail\u0026#34; ","description":"Dcape v1.0.0-rc1","id":4,"section":"updates","tags":null,"title":"Октябрь 2017","uri":"https://dopos.github.io/updates/2017_october/"},{"content":"Github: dcape\nCommit: v0.1, code working in general\nНачало опытной эксплуатации dcape.\n","description":"Первый релиз проекта dcape","id":5,"section":"updates","tags":null,"title":"Август 2017","uri":"https://dopos.github.io/updates/2017_august/"},{"content":"Github: fidm\nCommit: init\nНачало разработки аналога fig, утилиты для управления контейнерами Docker, которая была доступна на сайте fig.sh.\n","description":"Первый commit в проекте fidm","id":6,"section":"updates","tags":null,"title":"Февраль 2015","uri":"https://dopos.github.io/updates/2015_february/"},{"content":"Github: consup\nCommit: init\nНачало работ по построению решения для автоматизации работы с контейнерами docker.\n","description":"Первый commit в проекте consup","id":7,"section":"updates","tags":null,"title":"Ноябрь 2014","uri":"https://dopos.github.io/updates/2014_november/"},{"content":" Приложение traefik Docker traefik Назначение агрегация и проксирование www-сервисов развернутых приложений по заданному имени с поддержкой сертификатов Let\u0026rsquo;s Encrypt Назначение Traefik - ключевой сервис dcape. Он решает следующие задачи:\nпри запуске контейнера проанализировать его метки (label) и добавить контейнер в систему проксирования внешних http(s) запросов, определяя целевой контейнер по имени хоста если конфигурацией предусмотрена работа через TLS - проверить наличие сертификата и, при необходимости, получить или обновить его через сервис Let\u0026rsquo;s Encrypt Особенности Варианты файла конфигурации В составе dcape есть три варианта файла конфигурации traefik:\ntraefik.local.yml - использование DCAPE на локальном компьютере без поддержки TLS traefik.acme-http.yml - https с получением сертификатов по протоколу HTTP-01 traefik.acme.yml - https с получением сертификатов по протоколу HTTP-01 и DNS-01 (для поддержки wildcard-доменов) При выполнении команды make apply, по значению параметра ACME определяется вариант конфигурации и соответствующий файл копируется в var/traefik/traefik.yml с заменой переменных (если его еще нет).\nОграничение видимости контейнеров Для того, чтобы конкретный экземпляр traefik отреагировал на запуск контейнера, в конфигурации контейнера надо указать две метки:\n1 2 3 labels: - traefik.enable=true - dcape.traefik.tag=${DCAPE_TAG} Если не задана первая из этих меток, контейнер не будет виден никакому экземпляру traefik. Значение второй метки позволяет запустить на одном хосте несколько экземпляров traefik и привязывать контейнер только к тому экземпляру, у которого совпадает значение DCAPE_TAG.\nТакая функциональность обеспечивается следующими настройками traefik:\n1 2 3 4 providers: docker: exposedByDefault: false constraints: Label(`dcape.traefik.tag`,`=DCAPE_TAG=`) Поддержка wildcard-доменов Dcape поддерживает протокол TLS с использованием ключей Let\u0026rsquo;s Encrypt.\nДля получения сертификатов по протоколу DNS-01 необходим доступ к АПИ сервера DNS. В состав dcape для этого включен сервер powerdns. Если параметр ACME имеет значение wild, при выполнении команды make apply создается файл var/traefik/traefik.env с настройками для доступа к АПИ локальной копии powerdns\nНастройки контейнера для работы с TLS Ниже в примерах использованы следующие параметры конфигурации:\nAPP_TAG - уникальный тег контейнера, может формироваться автоматически из значения APP_SITE USE_TLS - использовать TLS APP_SITE - основной hostname контейнера APP_ACME_DOMAIN - wildcard-домен контейнера HTTP-01, индивидуальные сертификаты 1 2 3 labels: - traefik.http.routers.${APP_TAG}.tls=${USE_TLS} - traefik.http.routers.${APP_TAG}.tls.certresolver=letsEncrypt DNS-01, wildcard-домен 1 2 3 4 5 labels: - traefik.http.routers.${APP_TAG}.tls=${USE_TLS} - traefik.http.routers.${APP_TAG}.tls.certresolver=letsEncrypt - traefik.http.routers.${APP_TAG}.tls.domains[0].main=${APP_SITE} - traefik.http.routers.${APP_TAG}.tls.domains[0].sans=${APP_ACME_DOMAIN} Тестирование Файл конфигурации traefik включает строку\n1 # caServer: \u0026#34;https://acme-staging-v02.api.letsencrypt.org/directory\u0026#34; В период настройки, во избежание бана со стороны Letsencrypt, рекомендуется ее раскомментировать для работы через тестовый канал (выписывается Fake сертификат), а после полной отладки механизма, удалить.\nНесколько копий dcape на одном сервере dcape позволяет запуск нескольких экемпляров на одном сервере, для этого они должны использовать разные порты. Поэтому TLS с обновлением сертификатов будет доступен только тому экземпляру, который слушает порт 443.\nДля запуска второго экземпляра необходимо разместить его в другом каталоге (или использовать другие значения параметров CFG, DCAPE_VAR) и изменить в его настройках:\nпорты в параметрах TRAEFIK_LISTEN и TRAEFIK_LISTEN_SSL параметр DCAPE_TAG ","description":"агрегация и проксирование www-сервисов развернутых приложений по заданному имени с поддержкой сертификатов Let's Encrypt","id":8,"section":"dcape","tags":null,"title":"traefik","uri":"https://dopos.github.io/dcape/baseapps/traefik/"},{"content":"Введение Dcape v2 предназначен для построения gitops (CI/CD) решений, в которых на каждом сервере установлен dcape и на одном - web-сервис git (например: gitea), который по факту изменений в репозитории активирует drone на присоединенных серверах.\nПосле развёртывания сервисов git/drone, задача dcape уже решена, но возникает возможность добавить в деплой:\ndocker-compose.yml Makefile Эти файлы добавляются в образ dcape-compose, поэтому доступны и на хостовой системе и при развёртывании. Для работы с ними в Makefile приложения надо добавить директивы:\n1 2 3 4 5 6 7 8 9 # ------------------------------------------------------------------------------ # Find and include DCAPE/apps/drone/dcape-app/Makefile DCAPE_COMPOSE ?= dcape-compose DCAPE_MAKEFILE ?= $(shell docker inspect -f \u0026#34;{{.Config.Labels.dcape_app_makefile}}\u0026#34; $(DCAPE_COMPOSE)) ifeq ($(shell test -e $(DCAPE_MAKEFILE) \u0026amp;\u0026amp; echo -n yes),yes) include $(DCAPE_MAKEFILE) else include /opt/dcape-app/Makefile endif Это позволяет\nне дублировать в make такие цели, как dc, db-create, .drone-default директивой USE_DB=yes добавлять в .env настройки БД и активировать команды db-* директивой ADD_USER=yes добавлять в .env настройки учетной записи пользователя использовать docker-compose.yml в цели dc как основу для перезаписи. См. также: Пример использования\nАлгоритм настройки Первое развёртывание приложения в среде dcape состоит из следующих шагов:\nсоздать репозиторий (или зеркало) в gitea активировать репозиторий в drone целевого сервера выполнить git push (или тест вебхука) - drone произведет попытку развёртывания, в результате которой будет создан файл .env и сохранен в enfist с ключом org--repo_name--branch.sample отредактировать конфигурацию и сохранить ее под именем без суффикса .sample повторить деплой в drone или тест вебхука - приложение будет развернуто на целевом сервере После этого push в репозиторий проекта будет приводить к разворачиванию/обновлению приложения в среде dcape.\nДля развертывания приложения в среде dcape, оно должно поддерживать интеграцию с тремя подсистемами:\ntraefik drone enfist Ниже описаны примеры такий интеграции\nИнтеграция с traefik Производится с помощью меток контейнера.\nПример docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 # custom app config # overrides DCAPE/apps/drone/dcape-app/docker-compose.yml version: \u0026#39;2\u0026#39; services: app: environment: - VAR=value volumes: - ${APP_ROOT}/html:/usr/share/nginx/html:ro Интеграция с drone Производится с помощью файла .drone.yml, который размещается в корне репозитория.\nПример .drone.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 --- kind: pipeline type: docker name: app steps: - name: deploy_local pull: never image: ${DCAPE_COMPOSE} commands: - . setup config - make .drone-default volumes: - name: dockersock path: /var/run/docker.sock volumes: - name: dockersock host: path: /var/run/docker.sock Пояснения по строкам 10: использовать для развертывания образ dcape-compose (создается при установке dcape) 12: интеграция с enfist 13: подготовка окружения и запуск docker-compose Подготовка окружения создание персистентного каталога\nИнтеграция с enfist enfist - это сервис хранения файлов конфигурации, которые в dcape имеют имя .env. Соответственно, приложение должно уметь работать с конфигурацией, размещенной в таком файле. В части переменных, используемых в docker-compose.yml, формат файла должен соответствовать docker-compose env_file.\nФайл .env c переменными для docker-compose.yml и другими переменными для запуска приложения не размещается в репозитории, работа с ним при деплое осуществляется командой setup config:\nесли в enfist нет конфигурации для текущей комбинации \u0026ldquo;организация-репозиторий-ветка\u0026rdquo;, выполняется make .env.sample (если в репозитории нет .env.sample) и полученный файл сохраняется в enfist с именем \u0026ldquo;организация-репозиторий-ветка.sample\u0026rdquo; иначе - конфигурация из enfist выгружается в файл .env Для каждой ветки репозитория создается своя конфигурация запуска.\nОбновление и удаление развернутого приложения В случае, если префикс (DCAPE_TAG) и имя (APP_TAG) приложения не изменились - контейнер будет остановлен и удален обновлении приложения. В остальных случаях управление контейнерами и образами может прибыть произведено через portainer\nСм. также Актуальный список адаптированных приложений dcape ","description":"Адаптация приложения для развертывания в среде dcape","id":9,"section":"dcape","tags":null,"title":"Приложения","uri":"https://dopos.github.io/dcape/usage/apps/"},{"content":"Зачем это нужно Цель создания dcape - получить относительно удобный способ запуска docker-приложений простой короткой командой, например\nmake up - локально git push - удаленно Главная проблема была в том, как повесить несколько контейнеров на порт 80, чтобы запросы к ним проксировались по имени хоста не на основании заранее руками созданного конфига, а по факту старта контейнера - эту задачу решил traefik.\nБонусом он добавил TLS, т.е. возможность получения сертификата для хоста или, когда хостов много - для домена (т.е. wildcard-домена)\nПри использовании traefik приложение может управлять своей доступностью извне посредством меток (label) docker-контейнера, задавать которые можно в файле docker-compose.yml\nПроект dcape - это попытка достичь требуемых целей с помощью traefik, docker-compose и минимального количества дополнительного кода.\nКак это выглядит Развертывание dcape имеет результатом 2 файла - docker-compose.yml и .env, которые позволяют командой make up запустить весь стек выбранных для конкретного сервера приложений. Все эти приложения доступны на dockerhub и все нужное для их запуска командой docker-compose up может быть подготовлено вручную, однако dcape добавляет в процесс подготовки такого решения следующие преимущества:\nфайл параметров (.env) формируется программно, что позволяет использовать в значениях переменные генерировать необходимые приложениям пароли и токены формировать взаимосвязанные настройки приложений файл конфигурации контейнеров (docker-compose.yml) формируется программно, что позволяет параметризовать список приложений для каждой инсталляции, в частности если разворачивается группа серверов различного назначения, gitea достаточно развернуть только на одном из них, а на остальных вместо make init выполнять make init GITEA=https://git.domain.tld если для сервера не нужен SSL (например, в локальной сети), не указывать параметр ACME если для сервера не нужен DNS (например, wildcard сертификаты не используются или их поддержка не использует локальный DNS), не указывать параметр DNS использование make позволяет перед стартом приложения выполнять его инициализацию, включая создание БД (и, при необходимости, загрузку дампа БД) формирование файлов конфигураций по шаблонам регистрацию OAuth2 приложений ","description":"Какие задачи решает проект","id":10,"section":"dcape","tags":null,"title":"Назначение","uri":"https://dopos.github.io/dcape/purpose/"},{"content":"В случае, если уже\nнастроен DNS c поддержкой wildcard-record есть сервер gitea (в примере - it.domain.tld) в gitea создан TOKEN на новом сервере установлены зависимости , установка dcape на этом новом сервере может быть произведена так:\n1 2 3 4 5 6 7 8 9 git clone -b v2 --single-branch --depth 1 https://github.com/dopos/dcape.git cd dcape make install ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\ TRAEFIK_ACME_EMAIL=admin@domain.tld \\ NARRA_GITEA_ORG=dcape \\ DRONE_ADMIN=lekovr \\ PDNS_LISTEN=192.168.23.10:53 \\ GITEA=https://it.domain.tld \\ TOKEN=**token_from_gitea** В PDNS_LISTEN порт изменен на стандартный (по умолчанию: 54) и задан ip, чтобы не возникало конфликта с локальным резолвером.\n","description":"Как развернуть dcape, если уже есть gitea и DNS","id":11,"section":"dcape","tags":null,"title":"Быстрый старт","uri":"https://dopos.github.io/dcape/gettingstarted/quickstart/"},{"content":" Приложение postgresql Docker postgres Назначение хранение конфигураций всех приложений и размещение баз данных приложений, которым требуется СУБД Назначение СУБД postgresql используется следующими сервисами dcape:\ngitea drone enfist powerdns Кроме этого, контейнер доступен для других приложений, развертываемых под dcape.\nОсобенности Размещение файлов Постоянные данные контейнера размещаются в каталоге var/db в следующих подкаталогах:\ndata - внутренние файлы postgresql init - скрипты, которые выполняются при старте контейнера backup - размещение дампов баз для импорта/экспорта conf.d - каталог дополнений в конфигурацию, активируется вручную параметром include_dir файла postgresql.conf shared - каталог для размещения расширений перед их ручной активацией Резервные копии Для резервного копирования баз данных используется приложение pg-backup которое по заданному в настройках расписанию делает дампы указанных в настройках баз и размещает их в формате .tgz в каталоге var/db/backup\n","description":"хранение конфигураций всех приложений и размещение баз данных приложений, которым требуется СУБД","id":12,"section":"dcape","tags":null,"title":"postgresql","uri":"https://dopos.github.io/dcape/baseapps/postgresql/"},{"content":"Если dcape был установлен командой git clone, для его обновления используется команда git pull, после выполнения которой необходимо обновить файл .env\nОбновление файла .env При обновлении проекта возможно появление новых переменных в .env файле.\nАлгоритм обновления .env с сохранением старых настроек:\n1 2 mv .env .env.bak make init Другой вариант:\n1 2 mv .env .env.1019 make init CFG_BAK=.env.1019 Все совпадающие значения будут взяты из .env.bak (т.е. из старого конфига).\nЕсли изменятся номера версий используемых docker-образов сервисов dcape, будут выведены предупреждения.\nОбновление версий сервисов Для того, чтобы обновить все номера версий используемых docker-образов сервисов dcape, сохранив остальные настройки, надо подготовить .env.bak, убрав из него номера версий:\n1 2 3 grep -v \u0026#34;_VER=\u0026#34; .env \u0026gt; .env.bak mv .env .env.pre make init Резервирование .env в enfist Настройки dcape/.env не сохраняются в enfist автоматически, но это можно сделать вручную:\n1 2 ln -s .env dcape.env make env-set TAG=dcape Восстановление сервисов из резервной копии dcape-app-pg-backup предназначен для ежедневного создания резервных копий баз данных, которые сохраняются в /opt/dcape/var/db/backup. Кроме такой копии, для восстановления сервиса необходимо перенести соответствующий каталог из /opt/dcape/var/ (с сохранением владельца файлов).\nПример команды восстановления БД:\n1 2 3 make gitea-apply PG_SOURCE_SUFFIX=-210212 # или make db-create NAME=GITEA PG_SOURCE_SUFFIX=-210212 При восстановлении надо учитывать следующее\nБД загружается из дампа только при ее создании, т.е. предварительно надо ее удалить, если она есть в копии файлов обычно есть конфиг, в котором задан пароль к БД (пример для gitea - /opt/dcape/var/gitea/gitea/conf/app.ini), этот пароль должен совпадать с тем, который указан в .env PG_SOURCE_SUFFIX используется для формирования имени дампа так: ${DCAPE_DB_DUMP_DEST}/${GITEA_DB_TAG}${PG_SOURCE_SUFFIX}.tgz, поэтому если имя БД и префикс архива не совпадают, архив надо переименовать ","description":"Обновление dcape и версий сервисов dcape","id":13,"section":"dcape","tags":null,"title":"Обновление","uri":"https://dopos.github.io/dcape/usage/update/"},{"content":"Зависимости linux 64bit с git, make, sed, curl, jq docker docker-compose используется в dcape в формате docker-образа, поэтому отдельной установки не требует.\nПример установки зависимостей:\ndocker 1 2 3 4 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; sudo apt install docker-ce docker-ce-cli containerd.io sudo usermod -a -G docker $USER См. также: Install docker\nmake, git, sed, curl, jq 1 sudo apt install make git sed curl jq ","description":"Приложения, необходимые для установки dcape","id":14,"section":"dcape","tags":null,"title":"Зависимости","uri":"https://dopos.github.io/dcape/gettingstarted/dependencies/"},{"content":" Приложение gitea Docker gitea/gitea Назначение git совместимый сервис для работы с репозиториями (если используется несколько серверов, разворачивается только на одном) Gitea - это сервис управления git-репозиториями, который поддерживает\nинтеграцию с сервисом развертывания приложений (drone) интеграцию с narra по протоколу OAuth2 ","description":"git-совместимый сервис для работы с репозиториями","id":15,"section":"dcape","tags":null,"title":"gitea","uri":"https://dopos.github.io/dcape/baseapps/gitea/"},{"content":"Т.к. dcape разворачивает несколько независимых сервисов, их имена должны быть зарегистрированы в DNS. Предпочтительным является вариант регистрации wildcard DNS record, но можно и регистрировать индивидуально.\nПример имен для сервера srv1.domain.tld:\nsrv1.domain.tld - для фронтендов narra, enfist, traefik git.srv1.domain.tld - для gitea drone.srv1.domain.tld - для drone port.srv1.domain.tld - для portainer ns.srv1.domain.tld - для powerdns /etc/hosts Вариант для случая, когда dcape разворачивается и используется на локальном компьютере, в т.ч. если у этого компьютера нет сетевых интерфейсов.\nТ.к. сервисы dcape общаются между собой, их hostname нельзя привязать к loopback- интерфейсу. В качестве ip-адреса можно использовать шлюз подсети dcape, которая задается параметром DCAPE_SUBNET (по умолчанию, подсеть - 100.127.0.0/24 и шлюз - 100.127.0.1):\n1 2 grep -q \u0026#34; dev.lan\u0026#34; /etc/hosts || \\ sudo bash -c \u0026#39;for n in \u0026#34;\u0026#34; git drone port ns ; do [ \u0026#34;$n\u0026#34; ] \u0026amp;\u0026amp; n=\u0026#34;$n.\u0026#34; ; echo \u0026#34;100.127.0.1 ${n}dev.lan\u0026#34; \u0026gt;\u0026gt; /etc/hosts ; done\u0026#39; dnsmasq В случае использования локальной сети, когда известен ip-адрес компьютера с dcape (в примере - 192.168.1.2) и установлен DNS-сервер dnsmasq, можно создать локальный wildcard-domain:\n1 2 sudo bash -c \u0026#39;echo \u0026#34;address=/.dev.lan/192.168.1.2\u0026#34; \u0026gt; /etc/NetworkManager/dnsmasq.d/dev.lan.conf\u0026#39; sudo service network-manager reload DNS зона При наличии доступ к управления DNS-сервером и если хост с dcape имеет внешний ip-адрес (в примере - 19.72.10.23), имена могут быть зарегистрированы одним из следующих способов:\nиндивидуальная регистрация srv1.domain.tld. A 19.72.10.23 git.srv1.domain.tld. A 19.72.10.23 drone.srv1.domain.tld. A 19.72.10.23 port.srv1.domain.tld. A 19.72.10.23 ns.srv1.domain.tld. A 19.72.10.23 wildcard DNS record srv1.domain.tld. A 19.72.10.23 *.srv1.domain.tld. A 19.72.10.23 wildcard DNS record с делегированием зоны В процессе регистрации wildcard сертификатов traefik производит изменения в DNS-зоне через АПИ DNS-сервера. Чтобы не давать ему доступ к основной DNS-зоне, можно для каждого сервера создать выделенную зону (в примере - srv1.domain.tld) и директивой CNAME делегировать управление сертификатами этой зоны отдельному серверу (в примере - серверу ns.srv1.domain.tld, т.е. локальному DNS). Используемая в dcape v2 версия traefik это уже поддерживает.\nsrv1.domain.tld. A 19.72.10.23 *.srv1.domain.tld. A 19.72.10.23 acme-srv1.domain.tld. NS ns.srv1.domain.tld _acme-challenge.srv1.domain.tld. CNAME acme-srv1.domain.tld _acme-challenge.*.srv1.domain.tld. CNAME acme-srv1.domain.tld Команда инициализации dcape для этого примера:\n1 2 3 make init ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\ TRAEFIK_ACME_EMAIL=admin@domain.tld \\ PDNS_LISTEN=19.72.10.23:53 В PDNS_LISTEN порт изменен на стандартный (по умолчанию: 54) и задан ip, чтобы не возникало конфликта с локальным резолвером.\nСм. также: настройка связки taefik-powerdns для DNS=wild\n","description":"Варианты настройки DNS","id":16,"section":"dcape","tags":null,"title":"Настройка DNS","uri":"https://dopos.github.io/dcape/gettingstarted/dns/"},{"content":" Приложение drone Docker image Назначение деплой приложений по событиям из gitea Как это работает Приложения (собственные исходные тексты или файлы конфигурации стороннего ПО) размещаются в репозитории на github.com или аналогичном сервисе управления git-репозиториями (может использоваться встроенное приложение gitea, или другой аналогичный сервис). При установке drone указывается адрес сервиса управления git-репозиториями В интерфейсе drone активируется нужный git-репозиторий При пуше коммита в репозиторий, сервис управления активирует webhook всех подключенных экземпляров drone Webhook drone клонирует репозиторий и выполняет инструкции из файла .drone.yml в контексте сервиса, заданного параметром type. Этот сервис должен быть запущен вместе с drone, в dcape в качестве такого сервиса используется drone-runner-docker Особенности если контейнеру надо монтировать каталоги, при активации в drone репозиторию надо поставить флаг Trusted (это может сделать пользователь, указанный в параметре DRONE_ADMIN, в противном случае этому пользователю будет отправлен запрос на разрешение развертывания) при установке drone в dcape создается образ dcape-compose, который может быть использован для развёртывания контейнеров кроме docker-compose и make, образ dcape-compose включает утилиту setup, которая поддерживает 2 команды: config - создание или скачивание конфигурации приложения из enfist root - создание каталога на хостовой системе и помещение пути к нему в переменную APP_ROOT Makefile для использования в директиве include файла Makefile адаптируемого приложения (чтобы не дублировать цели) docker-compose.yml для использования в качестве основы для override в адаптируемом приложении Переменные среды drone-docker-runner DCAPE_TAG - тег текущей копии dcape, значение из .env DCAPE_NET - имя сети dcape, значение из .env DCAPE_COMPOSE - имя образа dcape-compose для текущей копии dcape (префикс совпадает с DCAPE_TAG) DCAPE_ROOT - путь к каталогу var (/opt/dcape/var) хостовой системы, который в drone-docker-runner примонтирован по этому же пути Пример .drone.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 --- kind: pipeline type: docker name: app steps: - name: deploy_local pull: never image: ${DCAPE_COMPOSE} commands: - . setup config - make .drone-default volumes: - name: dockersock path: /var/run/docker.sock volumes: - name: dockersock host: path: /var/run/docker.sock См также: .drone.yml\n","description":"развёртывание приложений по событиям из gitea","id":17,"section":"dcape","tags":null,"title":"drone","uri":"https://dopos.github.io/dcape/baseapps/drone/"},{"content":"Исходники Рекомендуемым способом копирования файлов на сервер является выполнение git clone. Это позволяет в будущем\nобновить исходники для получения информации о проверенных новых версиях используемых приложений увидеть локальные изменения исходников, если их понадобится сохранить 1 2 3 4 cd /opt sudo mkdir dcape \u0026amp;\u0026amp; sudo chown $USER dcape git clone -b v2 --single-branch --depth 1 https://github.com/dopos/dcape.git cd dcape Настройка и запуск Локальный сервер Вариант без поддержки SSL, но с установкой gitea. Выполняется в 3 шага, т.к. на шаге 2 необходимо использовать браузер для\nзавершения установки gitea создания API TOKEN Шаг 1. Подготовка к запуску gitea 1 2 3 make init DCAPE_DOMAIN=srv1.domain.tld make apply make up Шаг 2. Запуск и настройка gitea открыть GITEA_URL, нажать \u0026ldquo;вход\u0026rdquo; - откроется страница параметров установки ввести логин и пароль учетной записи (логин должен совпадать со значением DRONE_ADMIN) создать токен (Настройки -\u0026gt; Приложения -\u0026gt; Генерировать токен) Шаг 3. Запуск dcape 1 2 make gitea-setup TOKEN=... make up TOKEN - ключ АПИ gitea, который создается вручную пользователем, имеющим права на создание\nорганизации, указанной в параметре NARRA_GITEA_ORG (если она не создана ранее) OAuth2 приложений narra и drone (их CLIENT_ID и CLIENT_KEY будут сохранены в .env). TOKEN используется однократно при выполнении make gitea-setup и нигде не сохраняется\nСм. также: Issue 22, Автоматизировать первичную настройку Gitea\nПримеры make init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # сервер для локального использования make init # изменение локального порта, по которому будет доступен postgresql (по умолчанию: 5433): make init PG_PORT_LOCAL=5434 # посмотреть .env без сохранения изменений make init CFG=tmp$$ DCAPE_VAR=tmp$$-var ACME=wild DNS=wild \u0026amp;\u0026amp; less tmp$$ \u0026amp;\u0026amp; rm -rf tmp$$* # сервер без gitea, с wildcard сертификатом make init ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\ TRAEFIK_ACME_EMAIL=admin@domain.tld \\ PDNS_LISTEN=192.168.23.10:53 \\ NARRA_GITEA_ORG=dcape \\ DRONE_ADMIN=lekovr \\ GITEA=https://it.domain.tld Использование make up - старт приложений После выполнения этой команды все последующее администрирование среды и запущеных сервисов производится в www интерфейсе portainer.\nВместе с тем, в консоли доступны следующие команды:\nmake - список доступных команд make down - остановка и удаление всех контейнеров make dc CMD=\u0026quot;up -d enfist\u0026quot; - стартовать контейнер заданного приложения (если не запущен) make dc CMD=\u0026quot;rm -f -s enfist\u0026quot;- остановить и удалить контейнер enfist make dc CMD=\u0026quot;up -d --force-recreate enfist\u0026quot; - пересоздать и стартовать контейнер enfist и его зависимости make db-create NAME=ENFIST - создать в postgresql пользователя и БД из настроек enfist make db-drop NAME=ENFIST - удалить пользователя и БД из настроек enfist make apply PG_SOURCE_SUFFIX=-171014 - развернуть проект, используя резервную копию БД с заданным суффиксом , созданную pg-backup ","description":"Инструкция по установке","id":18,"section":"dcape","tags":null,"title":"Установка","uri":"https://dopos.github.io/dcape/gettingstarted/installation/"},{"content":"Dcape может быть развернут в конфигурации CLI-only, с минимальным набором контейнеров\nrouter (traefik) - реверс-прокси и сертификаты db (postgresql) - БД для приложений (не используется dcape) manager (portainer) - www-интерфейс для управления контейнерами (не используется dcape) при этом\nСертификаты LE обновляются через HTTP-1 (нет поддержки wildcard доменов) Доступ в traefik dashboard происходит по фиксированному паролю Далее описано, как получить такую конфигурацию в текущей версии dcape\n1 2 3 4 5 git clone --single-branch --depth 1 https://github.com/dopos/dcape.git cd dcape make install DNS=no AUTH_TOKEN=none AUTH_URL=none APPS_ALWAYS=manager \\ DCAPE_DOMAIN=host.example.com \\ ACME=yes TRAEFIK_ACME_EMAIL=admin@example.com Для доступа в traefik dashboard необходимо\nсгенерить пароль 1 2 3 4 5 6 LOGIN=admin PASS=$(openssl rand -hex 16; echo) echo \u0026#34;Login: $LOGIN\u0026#34; echo \u0026#34;Password: $PASS\u0026#34; echo -n \u0026#34;HTPASS: \u0026#34; echo $(htpasswd -nb $LOGIN $PASS) | sed -e s/\\\\$/\\\\$\\\\$/g добавить в docker-compose.yml после строки - \u0026#34;traefik.http.routers.dashboard.middlewares=narra\u0026#34; строку\n- \u0026#34;traefik.http.middlewares.narra.basicauth.users=\u0026lt;HTPASS\u0026gt;\u0026#34; ","description":"Как развернуть dcape без gitea и DNS","id":19,"section":"dcape","tags":null,"title":"Минимальная конфигурация","uri":"https://dopos.github.io/dcape/gettingstarted/minimal/"},{"content":" Приложение enfist Docker ghcr.io/apisite/app-enfist Назначение хранилище файлов конфигурации в postgresql с доступом через браузер и АПИ Enfist - это сервис хранения конфигураций приложений. Конфигурации хранятся в БД в виде Key-value таблицы, где ключ (key) формируется из адреса git репозитория organization--repo_name--branch (организация--проект--ветка), а значение (value) - содержимое .env файла.\nДоступ к хранилищу ограничивается narra и осуществляется через фронтенд dcape.\nКроме веб-интерфейса, работа с конфигурациями запуска может осуществляться посредством dcape-config-cli.\nПримеры команд, доступных после клонирования (git clone) и настройки (make .env) dcape-config-cli:\nmake get TAG=name - получить из хранилища конфигурацию для ключа (тега) name и сохранить в файл name.env make set TAG=name - загрузить файл name.env в хранилище с ключом (тегом) name Тег содержит значение, равное ключу БД Key-value хранилища: organization--name_of_repo--branch (организация--проект--ветка)\nВ файле конфигурации dcape-config-cli задается два параметра:\nENFIST_URL - адрес сервиса enfist CIS_TOKEN - токен для авторизации в gitea ","description":"хранилище файлов конфигурации в postgresql с доступом через браузер и АПИ","id":20,"section":"dcape","tags":null,"title":"enfist","uri":"https://dopos.github.io/dcape/baseapps/enfist/"},{"content":" Приложение narra Docker ghcr.io/dopos/narra Назначение сервис OAuth2 авторизации для учетных записей gitea, используемый для ограничения доступа к приватным ресурсам Narra - это OAuth2 прокси для учетных записей gitea, который используется для ограничения доступа к приватным ресурсам:\nфронтенд dcape - список развернутых на сервере приложений и сервисов фронтенд traefik фронтенд enfist статистика использования powerdns ","description":"сервис OAuth2 авторизации для учетных записей gitea, используемый для ограничения доступа к приватным ресурсам","id":21,"section":"dcape","tags":null,"title":"narra","uri":"https://dopos.github.io/dcape/baseapps/narra/"},{"content":"Аргументы \u0026lsquo;make init\u0026rsquo; Благодаря использованию Makefile, любой параметр dcape может быть задан в аргументах команды make init.\nАктуальные значения параметров и их описания при выполнении этой команды сохраняются в файле с именем .env (или именем, заданном в параметре CFG).\nАктуальный для конкретного экземпляра dcape список параметров зависит от наличия добавленных сервисов.\nСледующие параметры имеют ключевое значение для конфигурации dcape:\nDCAPE_TAG Идентификатор стека приложений, позволяющий изолировать его от других контейнеров docker (в т.ч. и от другой копии стека dcape если такая будет запущена на том же сервере) Префикс контейнеров стека (значение используется как COMPOSE_PROJECT_NAME) DCAPE_DOMAIN hostname для сервисов narra, enfist, traefik суффикс по умолчанию для hostname остальных приложений стека GITEA значения: [yes]|\u0026lt;URL\u0026gt; yes - добавить в конфигурацию локальный сервис gitea \u0026lt;URL\u0026gt; - адрес внешнего сервера gitea DNS значения: [no]|yes|wild добавить в конфигурацию локальный сервис powerdns wild - настроить зону для поддержки wildcard сертификатов letsencrypt ACME значения: [no]|http|wild включить поддержку сертификатов letsencrypt no - адреса сервисов dcape будут начинаться с http://, иначе - https:// wild - в конфигурацию traefik будет добавлена поддержка сертификатов для домена *.${DCAPE_DOMAIN} NARRA_GITEA_ORG username организации gitea, участникам которой будет предоставлен доступ к приватным ресурсам DRONE_ADMIN username пользователя gitea, который получит права администратора в drone См. также Варианты файла конфигурации traefik ","description":"Параметры конфигурации","id":22,"section":"dcape","tags":null,"title":"Конфигурация","uri":"https://dopos.github.io/dcape/gettingstarted/configuration/"},{"content":" Приложение powerdns Docker psitrax/powerdns Назначение DNS-сервер для поддержки wildcard domain сертификатов powerdns - это DNS сервер, который поддерживает\nхранение зон в БД (пример приложения управления зонами - dcape-dns-config) управление зонами по АПИ (используется в dcape для поддержки wildcard DNS сертификатов) ","description":"DNS-сервер для поддержки wildcard DNS сертификатов","id":23,"section":"dcape","tags":null,"title":"powerdns","uri":"https://dopos.github.io/dcape/baseapps/powerdns/"},{"content":"Dcape v2 отличается от v1:\nпереездом деплоя на drone сменой версии traefik на v2. добавлением локально создаваемого образа dcape-compose Подробнее об изменениях:\nВерсия traefik Было: 1.7 Стало: 2.0 В результате изменились\nНастройки в docker-compose Теперь для привязки настроек к контейнеру необходимо в имя добавлять уникальное имя приложения для всех приложений, работающих с одной копией traefik. Для этого добавлен параметр APP_TAG, который может быть рассчитан автоматически по hostname ресурса. Этот же параметр можно использовать как префикс всех контейнеров приложения (значение ключа -p команды docker-compose)\nПоддержка TLS Теперь для добавления TLS достаточно добавить в блок labels файла docker-compose.yml строку вида\n1 - traefik.http.routers.${APP_TAG}.tls=${USE_TLS} Кроме этого, поддержка wildcard-domain теперь доступна \u0026ldquo;из коробки\u0026rdquo; и реализована дополнительным сервисом (powerdns) которым traefik управляет через АПИ.\nАвторизация для приватных ресурсов Ранее осуществлялась через API gitea, теперь gitea выступает OAuth2-сервером. Это добавило необходимость регистрировать в gitea приложения (narra, drone) и разрешать их использование для каждого пользователя.\ndcape-compose Dockerfile Сервис развертывания Было: webhook + webtail с командами make start-hook и make update (make использует /bin/bash) Стало: drone и .drone.yml (make использует /bin/sh) Удаление деплоя Основным способом для остановки контейнера и удаления образа теперь является portainer.\n","description":"Отличия dcape версии 2 от версии 1","id":24,"section":"dcape","tags":null,"title":"Отличия dcape v2","uri":"https://dopos.github.io/dcape/gettingstarted/v2changes/"},{"content":" Приложение portainer Docker portainer/portainer Назначение Web-интерфейс к docker portainer - это инструмент для управления инфраструктурой docker (образами, контейнерами, томами и т.д.) с помощью браузера.\nОн не используется никакими другими сервисами dcape и включен для удобства эксплуатации серверов.\n","description":"Web-интерфейс к docker","id":25,"section":"dcape","tags":null,"title":"portainer","uri":"https://dopos.github.io/dcape/baseapps/portainer/"}]