[{"content":"Github: dcape\nRelease: v1.1, Two years in production\n","description":"Dcape v1.1","id":0,"section":"updates","tags":null,"title":"November 2020","uri":"http://dopos.github.io/en/updates/2020_november/"},{"content":"v1.0.0-rc2 (2018-09-23) Github: dcape\nRelease: v1.0.0-rc2, Use apisite\nИзменено  apps/enfist: вместо pgrpc теперь используется apisite  Установка обновления git pull mv .env .env.bak make init make enfist-apply make up ","description":"Dcape v1.0.0-rc2","id":1,"section":"updates","tags":null,"title":"September 2018","uri":"http://dopos.github.io/en/updates/2018_september/"},{"content":"v1.0.0-rc1 Date: 2017-10-22\nGithub: dcape\nRelease: v1.0.0-rc1, Ready to use\nИзменено  apps/traefik*: в настройки вынесен редирект 80 -\u0026gt; 443 apps/traefik теперь не совместим по конфигу с apps/traefik-acme, при переключении необходим make init  v0.10 Date: 2017-10-19\nИзменено  apps/cis: добавлено создание каталогов var/apps, var/log в cis-apply apps/cis: изменена версия webtail (0.12) apps/enfist: исправлено обновление sql-пакетов enfist,rpc и их текущие версии  Добавлено  Файл CHANGELOG.md README.md: информация о зависимости (gawk), уточнен блок \u0026ldquo;Быстрый старт\u0026rdquo; DEPLOY.md: блоки \u0026ldquo;Информация для разработчика\u0026rdquo;, \u0026ldquo;Удаление деплоя\u0026rdquo; Makefile: поддержка параметров PG_PORT_LOCAL, CFG_BAK  Установка обновления 1 2 3 4 5 6 7 8 9 10  git pull mv .env .env.bak make init # Тут будет предупреждение об устаревшей версии webtail - надо изменить на новую в .env make enfist-apply # Сообщения \u0026#34;ERROR: Newest lib version (0.1) loaded already\u0026#34; игнорируем, других ошибок быть не должно make dc CMD=\u0026#34;up -d webtail\u0026#34;   ","description":"Dcape v1.0.0-rc1","id":2,"section":"updates","tags":null,"title":"October 2017","uri":"http://dopos.github.io/en/updates/2017_october/"},{"content":"Github: dcape\nCommit: v0.1, code working in general\n","description":"First release of dcape project","id":3,"section":"updates","tags":null,"title":"August 2017","uri":"http://dopos.github.io/en/updates/2017_august/"},{"content":"Github: fidm\nCommit: init\n","description":"First commit of fidm project","id":4,"section":"updates","tags":null,"title":"February 2015","uri":"http://dopos.github.io/en/updates/2015_february/"},{"content":"Github: consup\nCommit: init\n","description":"First commit of consup project","id":5,"section":"updates","tags":null,"title":"November 2014","uri":"http://dopos.github.io/en/updates/2014_november/"},{"content":"Конфигурация traefik Использование TLS Dcape поддерживает протокол TLS с использованием ключей Let\u0026rsquo;s Encrypt.\nПри инициализации Dcape, поддержку TLS можно сконфигурировать четырьмя способами:\n local mode - локальная установка, использование DCAPE на локальном компьютере без поддержки TLS. dev mode - установка с использованием TLS с отдельным сертификатом для каждого приложения, использование которых настраивается конкретно для приложения при его развертывании. По умолчанию включено для встроенных приложений dcape (cis, portainer, gitea). В этом режиме используется переменная REDIR_ENTRY, которой устанавливается редирект на https отдельно для каждого приложения. В других режимах значение этой переменной не определено и не используется. wild mode - установка для деплоя приложений с возможностью использования TLS c wilcards сертификатом от Let\u0026rsquo;s Encrypt для всех веб сервисов dcape и приложений (позволяет не опасаться ограничения по лимиту количества сертификатов на один домен). production mode - установка с использованием индивидуальных сертификатов Let\u0026rsquo;s Encrypt для каждого веб сервиса.  Dcape поддерживает автоматическую генерацию сертификатов и валидацию домена для индивидуальных сертификатов.\nДля wildcards сертификатов, автоматическая генерация сертификатов и валидация доменов поддерживается для DNS\nпровайдеров с поддержкой API.\nПо умолчанию, при инициализации, конфигурируется автоматизированная генерация (перегенерация) сертификатов, при которой автоматически запускается генерация сертификата, в лог файл выдается хеш, который необходимо\nвнести в поле домена, тип TXT, имя _acme-challenge.$DOMAIN, значение хеш из лога .\nWildcards генерируется для домена: *.$DOMAIN, где DOMAIN=\u0026ldquo;домен для которого разворачивается DCAPE\u0026rdquo;\nДля перехода на автоматический wild-mode необходимо:\n изменить в директиве APPS сервис traefik-acme на treafik-acme-wild в .env добавить директивы DNS_CHALLENGE_PROVIDER и DNS_CHALLENGE_RESOLVER в apps/traefik-acme-wild/docker-compose.inc.yml в секции environment указать соответствующие вашему провайдеру наименования API_KEY/API_URL по примеру PDNS выполнить make reup для DCAPE.  В случае не запуска traefik-acme-wild смотреть логи контейнера. Контейнер не будет запускаться, если упущены обязательные настройки.\nВ период настройки во избежание бана со стороны Letsencrypt рекомендуется использовать директиву ACME_CASERVER=https://acme-staging-v02.api.letsencrypt.org/directory\nдля работы через тестовый канал (выписывается Fake сертификат), а после полной отладки механизма, выкл ACME_CASERVER.\n","description":"Test description","id":6,"section":"dcape","tags":null,"title":"traefik","uri":"http://dopos.github.io/en/dcape/baseapps/traefik/"},{"content":"Введение Dcape v2 предназначен для построения gitops (CI/CD) решений, в которых на каждом сервере установлен dcape и на одном - web-сервис git (например: gitea), который по факту изменений в репозитории активирует drone на присоединенных серверах.\nПосле развёртывания сервисов git/drone, задача dcape уже решена, но возникает возможность добавить в деплой:\n docker-compose.yml Makefile  Эти файлы добавляются в образ dcape-compose, поэтому доступны и на хостовой системе и при развёртывании. Для работы с ними в Makefile приложения надо добавить директивы:\n1 2 3 4 5 6 7 8 9  # ------------------------------------------------------------------------------ # Find and include DCAPE/apps/drone/dcape-app/Makefile DCAPE_COMPOSE ?= dcape-compose DCAPE_MAKEFILE ?= $(shell docker inspect -f \u0026#34;{{.Config.Labels.dcape_app_makefile}}\u0026#34; $(DCAPE_COMPOSE)) ifeq ($(shell test -e $(DCAPE_MAKEFILE) \u0026amp;\u0026amp; echo -n yes),yes) include $(DCAPE_MAKEFILE) else include /opt/dcape-app/Makefile endif   Это позволяет\n не дублировать в make такие цели, как dc, db-create, .drone-default директивой USE_DB=yes добавлять в .env настройки БД и активировать команды db-* директивой ADD_USER=yes добавлять в .env настройки учетной записи пользователя использовать docker-compose.yml в цели dc как основу для перезаписи.  Пример использования\nАлгоритм настройки Первое развёртывание приложения в среде dcape состоит из следующих шагов:\n создать репозиторий (или зеркало) в gitea активировать репозиторий в drone целевого сервера выполнить git push (или тест вебхука) - drone произведет попытку развёртывания, в результате которой будет создан файл .env и сохранен в enfist с ключом org--repo_name--branch.sample отредактировать конфигурацию и сохранить ее под именем без суффикса .sample повторить git push (или тест вебхука) - приложение будет развернуто на целевом сервере  После этого push в репозиторий проекта будет приводить к разворачиванию/обновлению приложения в среде dcape.\nДля развертывания приложения в среде dcape, оно должно поддерживать интеграцию с тремя подсистемами:\n traefik drone enfist  Ниже описаны примеры такий интеграции\nИнтеграция с traefik Производится с помощью меток контейнера.\nПример docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11  # custom app config# overrides DCAPE/apps/drone/dcape-app/docker-compose.ymlversion:\u0026#39;2\u0026#39;services:app:environment:- VAR=valuevolumes:- ${APP_ROOT}/html:/usr/share/nginx/html:ro   Интеграция с drone Производится с помощью файла .drone.yml, который размещается в корне репозитория.\nПример .drone.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ---kind:pipelinetype:dockername:websitesteps:- name:deploy_localpull:neverimage:${DCAPE_COMPOSE}commands:- . setup config- make .drone-upvolumes:- name:dockersockpath:/var/run/docker.sockvolumes:- name:dockersockhost:path:/var/run/docker.sock   Пояснения по строкам  10: использовать для развертывания образ dcape_drone-compose (создается при установке dcape) 12: интеграция с enfist 13: создание персистентного каталога 14: запуск drone-compose  Интеграция с enfist enfist - это сервис хранения файлов конфигурации, которые в dcape имеют имя .env. Соответственно, приложение должно уметь работать с конфигурацией, размещенной в таком файле. В части переменных, используемых в docker-compose.yml, формат файла должен соответствовать docker-compose env_file.\nФайл .env c переменными для docker-compose.yml и другими переменными для запуска приложения не размещается в репозитории, работа с ним при деплое осуществляется командой setup config:\n если в enfist нет конфигурации для текущей комбинации \u0026ldquo;организация-репозиторий-ветка\u0026rdquo;, выполняется make .env.sample (если в репозитории нет .env.sample) и полученный файл сохраняется в enfist с именем \u0026ldquo;организация-репозиторий-ветка.sample\u0026rdquo; иначе - конфигурация из enfist выгружается в файл .env  Для каждой ветки репозитория создается своя конфигурация запуска.\nОбновление и удаление развернутого приложения В случае, если префикс (DCAPE_TAG) и имя (APP_TAG) приложения не изменились - контейнер будет остановлен и удален обновлении приложения. В остальных случаях управление контейнерами и образами может прибыть произведено через portainer\nСм. также  Актуальный список адаптированных приложений dcape  ","description":"Адаптация приложения для развертывания в среде dcape","id":7,"section":"dcape","tags":null,"title":"Приложения","uri":"http://dopos.github.io/en/dcape/usage/apps/"},{"content":"Зачем это нужно Цель создания dcape - получить относительно удобный способ запуска docker-приложений простой короткой командой, например\n make up - локально git push - удаленно  Главная проблема была в том, как повесить несколько контейнеров на порт 80, чтобы запросы к ним проксировались по имени хоста не на основании заранее руками созданного конфига, а по факту старта контейнера - эту задачу решил traefik.\nБонусом он добавил TLS, т.е. возможность получения сертификата для хоста или, когда хостов много - для домена (т.е. wildcard-домена)\nПри использовании traefik приложение может управлять своей доступностью извне посредством меток (label) docker-контейнера, задавать которые можно в файле docker-compose.yml\nПроект dcape - это попытка достичь требуемых целей с помощью traefik, docker-compose и минимального количества дополнительного кода.\nКак это выглядит Развертывание dcape имеет результатом 2 файла - docker-compose.yml и .env, которые позволяют командой make up запустить весь стек выбранных для конкретного сервера приложений. Все эти приложения доступны на dockerhub и все нужное для их запуска командой docker-compose up может быть подготовлено вручную, однако dcape добавляет в процесс подготовки такого решения следующие преимущества:\n файл параметров (.env) формируется программно, что позволяет  использовать в значениях переменные генерировать необходимые приложениям пароли и токены формировать взаимосвязанные настройки приложений   файл конфигурации контейнеров (docker-compose.yml) формируется программно, что позволяет параметризовать список приложений для каждой инсталляции, в частности  если разворачивается группа серверов различного назначения, gitea достаточно развернуть только на одном из них, а на остальных вместо make init выполнять make init GITEA=https://git.domain.tld если для сервера не нужен SSL (например, в локальной сети), не указывать параметр ACME если для сервера не нужен DNS (например, wildcard сертификаты не используются или их поддержка не использует локальный DNS), не указывать параметр DNS   использование make позволяет перед стартом приложения выполнять его инициализацию, включая  создание БД (и, при необходимости, загрузку дампа БД) формирование файлов конфигураций по шаблонам регистрацию OAuth2 приложений    ","description":"Какие задачи решает проект","id":8,"section":"dcape","tags":null,"title":"Назначение","uri":"http://dopos.github.io/en/dcape/purpose/"},{"content":"Если dcape был установлен командой git clone, для его обновления используется команда git pull, после выполнения которой необходимо обновить файл .env\nОбновление файла .env При обновлении проекта возможно появление новых переменных в .env файле.\nАлгоритм обновления .env с сохранением старых настроек:\n1 2  mv .env .env.bak make init   Другой вариант:\n1 2  mv .env .env.1019 make init CFG_BAK=.env.1019   Все совпадающие значения будут взяты из .env.bak (т.е. из старого конфига).\nЕсли изменятся номера версий используемых docker-образов сервисов dcape, будут выведены предупреждения.\nОбновление версий сервисов Для того, чтобы обновить все номера версий используемых docker-образов сервисов dcape, сохранив остальные настройки, надо подготовить .env.bak, убрав из него номера версий:\n1 2 3  grep -v \u0026#34;_VER=\u0026#34; .env \u0026gt; .env.bak mv .env .env.pre make init   Резервирование .env в enfist Настройки dcape/.env не сохраняются в enfist автоматически, но это можно сделать вручную:\n1 2  ln -s .env dcape.env make env-set TAG=dcape   ","description":"Обновление dcape и версий сервисов dcape","id":10,"section":"dcape","tags":null,"title":"Обновление","uri":"http://dopos.github.io/en/dcape/usage/update/"},{"content":"Интернет-сервер без gitea Вариант c поддержкой wildcard-сертификатов SSL, при котором gitea установлена на другом сервере (в примере - it.domain.tld) и уже создан TOKEN. Настройка и запуск могут быть выполнены одной командой:\n1 2 3 4 5 6 7  make install ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  NARRA_GITEA_ORG=dcape \\  DRONE_ADMIN=dcapeadmin \\  PDNS_LISTEN=192.168.23.10:53 \\  GITEA=https://it.domain.tld \\  TOKEN=**token_from_gitea**   В PDNS_LISTEN порт изменен на стандартный (по умолчанию: 54) и задан ip, чтобы не возникало конфликта с локальным резолвером.\n","description":"test post","id":11,"section":"dcape","tags":null,"title":"Quick Start","uri":"http://dopos.github.io/en/dcape/gettingstarted/quickstart/"},{"content":"Зависимости  linux 64bit с git, make, sed, curl, jq (тестируем на Ubuntu) docker  docker-compose используется в dcape в формате docker-образа, поэтому отдельной установки не требует.\nПример установки зависимостей:\n1 2 3 4 5 6 7 8 9  # docker # см https://docs.docker.com/engine/install/ubuntu/ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs)stable\u0026#34; sudo apt install docker-ce docker-ce-cli containerd.io sudo usermod -a -G docker $USER # make git sed curl jq sudo apt install make git sed curl jq   ","description":"test post","id":12,"section":"dcape","tags":null,"title":"Deps","uri":"http://dopos.github.io/en/dcape/gettingstarted/dependencies/"},{"content":"DNS Т.к. dcape разворачивает несколько независимых сервисов, их имена должны быть прописаны в DNS. Предпочтительным является вариант регистрации wildcard domain, но можно и регистрировать индивидуально.\nПример имен для сервера srv1.domain.tld:\n srv1.domain.tld - для фронтендов narra, enfist, traefik git.srv1.domain.tld - для gitea drone.srv1.domain.tld - для drone port.srv1.domain.tld - для portainer ns.srv1.domain.tld - для powerdns  См. также: DNS setup\n/etc/hosts, для локального использования 1 2 3 4 5 6 7 8 9 10 11  grep -q git.dev.lan /etc/hosts || \\ sudo bash -c \u0026#39;cat \u0026gt;\u0026gt; /etc/hosts \u0026lt;\u0026lt;EOF 127.0.0.1 dev.lan 127.0.0.1 git.dev.lan 127.0.0.1 drone.dev.lan 127.0.0.1 port.dev.lan 127.0.0.1 ns.dev.lan EOF \u0026#39;   dnsmasq, для локального использования 1 2  sudo bash -c \u0026#39;echo \u0026#34;address=/.dev.lan/127.0.0.1\u0026#34; \u0026gt; /etc/NetworkManager/dnsmasq.d/dev.lan.conf\u0026#39; sudo service network-manager reload   DNS зона, индивидуальная регистрация srv1.domain.tld. A 192.168.23.10 git.srv1.domain.tld. A 192.168.23.10 drone.srv1.domain.tld. A 192.168.23.10 port.srv1.domain.tld. A 192.168.23.10 ns.srv1.domain.tld. A 192.168.23.10 DNS зона, wildcard-domain srv1.domain.tld. A 192.168.23.10 *.srv1.domain.tld. A 192.168.23.10 DNS зона, wildcard-domain с выделенным сервером для поддержки wildcard сертификатов Let\u0026rsquo;s Encrypt Для регистрации wildcard сертификатов traefik редактирует зону по АПИ. Чтобы не давать ему доступ к основной DNS-зоне, можно для каждого сервера создать выделенную зону (в примере - srv1.domain.tld) и директивой CNAME делегировать управление сертификатами этой зоны отдельному серверу (в примере - серверу ns.srv1.domain.tld, т.е. локальному DNS). Используемая в dcape v2 версия traefik это уже поддерживает.\nsrv1.domain.tld. A 192.168.23.10 *.srv1.domain.tld. A 192.168.23.10 acme-srv1.domain.tld. NS ns.srv1.domain.tld _acme-challenge.srv1.domain.tld. CNAME acme-srv1.domain.tld _acme-challenge.*.srv1.domain.tld. CNAME acme-srv1.domain.tld Команда инициализации dcape для этого примера:\n1 2 3  make init ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  PDNS_LISTEN=192.168.23.10:53   В PDNS_LISTEN порт изменен на стандартный (по умолчанию: 54) и задан ip, чтобы не возникало конфликта с локальным резолвером.\nСм. также: настройка связки taefik-powerdns для DNS=wild\nНастройка DNS В DNS зоне для домена your.domain должна быть создана wildcard запись для ip сервера (.your.domain A ip)\nПри установке на локальный компьютер, для доступа к сервисам dcape (cis.dev.lan, port.dev.lan) необходимо настроить wildcard domain *.dev.lan:\nОписание настройки\nsudo bash -c 'echo \u0026quot;address=/.dev.lan/127.0.0.1\u0026quot; \u0026gt; /etc/NetworkManager/dnsmasq.d/dev.lan.conf' sudo service network-manager reload или можно прописать эти имена в /etc/hosts:\nsudo bash -c 'echo \u0026quot;127.0.0.1 cis.dev.lan\u0026quot; \u0026gt;\u0026gt; /etc/hosts' sudo bash -c 'echo \u0026quot;127.0.0.1 port.dev.lan\u0026quot; \u0026gt;\u0026gt; /etc/hosts' но в этом случае придется отдельно прописывать имя для каждого нового сервиса dcape.\n powerdns - (docker) DNS-сервер, который хранит описания зон в БД postgresql  ","description":"Варианты настройки DNS","id":14,"section":"dcape","tags":null,"title":"DNS setup","uri":"http://dopos.github.io/en/dcape/gettingstarted/dns/"},{"content":"Исходники Рекомендуемым способом копирования файлов на сервер является выполнение git clone. Это позволяет в будущем\n обновить исходники для получения информации о проверенных новых версиях используемых приложений увидеть локальные изменения исходников, если их понадобится сделать  1 2 3 4  cd /opt sudo mkdir dcape \u0026amp;\u0026amp; sudo chown $USER dcape git clone -b v2 --single-branch --depth 1 https://github.com/dopos/dcape.git cd dcape   Настройка и запуск Локальный сервер Вариант без поддержки SSL, но с установкой gitea. Выполняется в 3 шага, т.к. на шаге 2 необходимо использовать браузер для\n завершения установки gitea создания API TOKEN  Шаг 1. Подготовка к запуску gitea 1 2 3  make init DCAPE_DOMAIN=srv1.domain.tld make apply make up   Шаг 2. Запуск и настройка gitea  открыть GITEA_URL, нажать \u0026ldquo;вход\u0026rdquo; - откроется страница параметров установки ввести логин и пароль учетной записи (логин должен совпадать со значением DRONE_ADMIN) создать токен (Настройки -\u0026gt; Приложения -\u0026gt; Генерировать токен)  Шаг 3. Запуск dcape 1 2  make gitea-setup TOKEN=... make up   TOKEN - ключ АПИ gitea, который создается вручную пользователем, имеющим права на создание\n организации, указанной в параметре NARRA_GITEA_ORG (если она не создана ранее) OAuth2 приложений narra и drone (их CLIENT_ID и CLIENT_KEY будут сохранены в .env).  TOKEN используется однократно при выполнении make gitea-setup и нигде не сохраняется\nСм. также: Issue 22, Автоматизировать первичную настройку Gitea\nПримеры make init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # сервер для локального использования make init # изменение локального порта, по которому будет доступен postgresql (по умолчанию: 5433): make init PG_PORT_LOCAL=5434 # посмотреть .env без сохранения изменений make init CFG=tmp$$ DCAPE_VAR=tmp$$-var ACME=wild DNS=wild \u0026amp;\u0026amp; less tmp$$ \u0026amp;\u0026amp; rm -rf tmp$$* # сервер без gitea, с wildcard сертификатом make init ACME=wild DNS=wild DCAPE_DOMAIN=srv1.domain.tld \\  TRAEFIK_ACME_EMAIL=admin@domain.tld \\  PDNS_LISTEN=192.168.23.10:53 \\  NARRA_GITEA_ORG=dcape \\  DRONE_ADMIN=dcapeadmin \\  GITEA=https://it.domain.tld   Использование  make up - старт приложений  После выполнения этой команды все последующее администрирование среды и запущеных сервисов производится в www интерфейсе portainer.\nВместе с тем, в консоли доступны следующие команды:\n make - список доступных команд make down - остановка и удаление всех контейнеров make dc CMD=\u0026quot;up -d cis\u0026quot; - стартовать контейнер заданного приложения (если не запущен) make dc CMD=\u0026quot;rm -f -s cis\u0026quot;- остановить и удалить контейнер make dc CMD=\u0026quot;up -d --force-recreate cis\u0026quot; - пересоздать и стартовать контейнер и его зависимости make db-create NAME=ENFIST - создать в postgresql пользователя и БД из настроек enfist make db-drop NAME=ENFIST - удалить пользователя и БД из настроек enfist make apply PG_SOURCE_SUFFIX=-171014 - развернуть проект, используя резервные копии БД, созданные pg-backup  ","description":"test post","id":15,"section":"dcape","tags":null,"title":"Installation","uri":"http://dopos.github.io/en/dcape/gettingstarted/installation/"},{"content":"Deploy with Drone Как это работает Приложения (собственные исходные тексты или файлы конфигурации стороннего ПО) размещаются в репозитории на github.com или аналогичном сервисе (может использоваться встроенное приложение gitea, или собственный аналогичный сервис).\nДля поддержки среды dcape репозиторий должен содержать файлы:\n docker-compose.yml - конфигурация сервисов docker, используемых для сборки и запуска приложений Makefile с командами создания файла конфигурации запуска .env, подготовки окружения приложения (БД и прочее), запуском сервисов через docker-compose  Разворачивание приложения производится командой make start-hook, которая путем исполнения целей из Makefile, подготавливает запуск приложения, финальной целью является запуск docker-compose с использованием переменных конфигурации запуска из файла .env. Инициирование запуска make start-hook производится вебхуком сервиса git, при использовании промышленного или облачного сервера с dcape. Если dcape используется локально - разворачивание приложения осуществляется командой make start, запускаемой в терминале.\nФайл .env c переменными для docker-compose.yml и другими переменными для запуска приложения не размещается в репозитории, при первом деплое он создается командой make .env и сохраняется вебхуком в Хранилище конфигураций (enfist). После этого, доступ к конфигурации запуска приложения осуществляется через это хранилище. Для каждой ветки репозитория создается своя конфигурация запуска.\nНастройка dcape, для разворачивания приложения, состоит из двух шагов:\n Настроить автоматическое обновление (webhook) в репозитории проекта Поместить в хранилище конфигураций запуска приложения файл .env с разрешением на деплой (_CI_HOOK_ENABLED=yes)  После этого push в репозиторий проекта будет приводить к разворачиванию/обновлению приложения в среде dcape.\nСм. также: DEPLOY.md.\nДля локального использования dcape такая настройка не требуется.\n","description":"Test description","id":16,"section":"dcape","tags":null,"title":"drone","uri":"http://dopos.github.io/en/dcape/baseapps/drone/"},{"content":"Аргументы make init Благодаря использованию Makefile, любой параметр dcape может быть задан в аргументах команды make init, после выполнения которой полный список переменных с их описанием и значениями доступен в файле с именем .env (или именем, заданном в параметре CFG).\nСледующие параметры имеют ключевое значение для конфигурации dcape:\nDCAPE_TAG\n Идентификатор стека приложений, позволяющий изолировать его от других контейнеров docker (в т.ч. и от другой копии стека dcape если такая будет запущена на том же сервере) Префикс контейнеров стека (значение используется как COMPOSE_PROJECT_NAME)  DCAPE_DOMAIN\n hostname для базовых приложений (narra, enfist, traefik) суффикс по умолчанию для hostname остальных приложений стека  GITEA\n значения: [yes]|\u0026lt;URL\u0026gt; yes - добавить в конфигурацию локальный сервер gitea \u0026lt;URL\u0026gt; - адрес внешнего сервера gitea  DNS\n значения: [no]|yes|wild добавить в конфигурацию локальный сервер powerdns wild - настроить зону для поддержки wildcard сертификатов letsencrypt  ACME\n значения: [no]|http|wild включить поддержку сертификатов letsencrypt no - адреса сервисов dcape будут начинаться с http://, иначе - https:// wild - в конфигурацию traefik будет добавлена поддержка сертификатов для домена *.DCAPE_DOMAIN  NARRA_GITEA_ORG\n username организации gitea, участникам которой будет предоставлен доступ к приватным ресурсам  DRONE_ADMIN\n username пользователя gitea, который получит права администратора в drone  См. также:\n Файл конфигурации traefik для сертификатов только HTTP-01 и HTTP-01 + DNS-01  При выполнении команды make apply соответствующий файл конфигурации traefik копируется в var/traefik/traefik.yml с заменой переменных.\nЕсли файл var/traefik/traefik.yml уже существует, команды make не производит в нем никаких изменений.\n","description":"test post","id":17,"section":"dcape","tags":null,"title":"Configuration","uri":"http://dopos.github.io/en/dcape/gettingstarted/configuration/"},{"content":"Dcape v2 отличается от v1:\n переездом деплоя на drone сменой версии traefik на v2. добавлением локально создаваемого образа dcape-compose  Подробнее об изменениях:\nВерсия traefik  Было: 1.7 Стало: 2.0  В результате изменились\nНастройки в docker-compose Теперь для привязки настроек к контейнеру необходимо в имя добавлять уникальное имя приложения для всех приложений, работающих с одной копией traefik. Для этого добавлен параметр APP_TAG, который может быть рассчитан автоматически по hostname ресурса. Этот же параметр можно использовать как префикс всех контейнеров приложения (значение ключа -p команды docker-compose)\nПоддержка TLS Теперь для добавления TLS достаточно добавить в блок labels файла docker-compose.yml строку вида\n1  - traefik.http.routers.${APP_TAG}.tls=${USE_TLS}  Кроме этого, поддержка wildcard-domain теперь доступна \u0026ldquo;из коробки\u0026rdquo; и реализована дополнительным сервисом (powerdns) которым traefik управляет через АПИ.\nАвторизация для приватных ресурсов Ранее осуществлялась через API gitea, теперь gitea выступает OAuth2-сервером. Это добавило необходимость регистрировать в gitea приложения (narra, drone) и разрешать их использование для каждого пользователя.\ndcape-compose  Dockerfile  Сервис развертывания  Было: webhook + webtail с командами make start-hook и make update (make использует /bin/bash) Стало: drone и .drone.yml (make использует /bin/sh)  Удаление деплоя Основным способом для остановки контейнера и удаления образа теперь является portainer.\n","description":"Отличия dcape версии 2 от версии 1","id":20,"section":"dcape","tags":null,"title":"Отличия dcape v2","uri":"http://dopos.github.io/en/dcape/gettingstarted/v2changes/"}]